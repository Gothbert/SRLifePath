 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index f93f9ff25d8dcfedd2abc69477abe33e2f79ec9e..41b801398983025f42e0daeb75c1d68a4937dfcd 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -935,54 +935,52 @@ private void buildConditionMonitorSection() {
                 skill = "LG: " + tfLanguage.getText();
                 rank = (String) cbProf.getSelectedItem();
             }
             if (skill != null && !skill.trim().isEmpty()) {
                 skillsTableModel.addRow(new Object[]{t, skill, rank, attr, cat});
                 updateSkillCount();
             }
             dialog.dispose();
         });
 
         dialog.getContentPane().add(main);
         dialog.pack();
         dialog.setLocationRelativeTo(frame);
         dialog.setVisible(true);
     }
 
     private void showAddQualityDialog() {
         JDialog dialog = new JDialog(frame, "Add Quality Dialog", true);
         JPanel main = new JPanel(new GridBagLayout());
         GridBagConstraints c = new GridBagConstraints();
         c.insets = new Insets(4,4,4,4);
         c.anchor = GridBagConstraints.WEST;
         int row = 0;
 
         c.gridx = 0; c.gridy = row; main.add(new JLabel("Category:"), c);
-        java.util.List<String> cats = new java.util.ArrayList<>(java.util.Arrays.asList("Magic","Matrix","Mental","Physical","Social","Vehicle"));
-        if (chkSurge.isSelected()) {
-            cats.add("Metagenic");
-        }
+        java.util.List<String> cats = new java.util.ArrayList<>(java.util.Arrays.asList(
+                "Magic","Matrix","Mental","Physical","Social","Vehicle","Metagenic"));
         JComboBox<String> cbCategory = new JComboBox<>(cats.toArray(new String[0]));
         c.gridx = 1; main.add(cbCategory, c); row++;
 
         c.gridx = 0; c.gridy = row; main.add(new JLabel("Type:"), c);
         JComboBox<String> cbType = new JComboBox<>(new String[]{"Positive","Negative"});
         c.gridx = 1; main.add(cbType, c); row++;
 
         c.gridx = 0; c.gridy = row; main.add(new JLabel("Quality Name:"), c);
         JComboBox<QualityEntry> cbName = new JComboBox<>();
         c.gridx = 1; main.add(cbName, c); row++;
 
         JLabel lblLevel = new JLabel("Level:");
         c.gridx = 0; c.gridy = row; main.add(lblLevel, c);
         SpinnerNumberModel levelModel = new SpinnerNumberModel(1,1,1,1);
         JSpinner spLevel = new JSpinner(levelModel);
         c.gridx = 1; main.add(spLevel, c); row++;
 
         c.gridx = 0; c.gridy = row; main.add(new JLabel("Karma:"), c);
         JTextField tfKarma = new JTextField(6); tfKarma.setEditable(false);
         c.gridx = 1; main.add(tfKarma, c); row++;
 
         JPanel btnPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
         JButton btnSave = new JButton("Save");
         JButton btnCancel = new JButton("Cancel");
         btnPanel.add(btnSave); btnPanel.add(btnCancel);
 
EOF
)