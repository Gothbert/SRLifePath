 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index a52f03759130b0f1c06a04296268e3504c341691..358db19d1518381fd44bbb6378e13922a3c47b19 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -35,59 +35,62 @@ public class ShadowrunCharacterBuilderGUI {
     private JTextField tfNuyen, tfPrimaryLifestyle, tfFakeIDs;
     private JTextArea taNotes;
     
     // ATTRIBUTES fields
     private JSpinner spBody, spAgility, spReaction, spStrength,
                      spWillpower, spLogic, spIntuition, spCharisma,
                      spEdge, spEssence, spMagic, spResonance;
     private JTextField tfComposure, tfJudgeIntentions, tfMemory, tfLiftCarry;
     // TODO later: initiative and other derived stats
     // private JTextField tfInitiative, tfMatrixInitiative, tfAstralInitiative,
     //                    tfJudgeIntentions, tfMemory, tfLiftCarry, tfMovement,
     //                    tfUnarmedAR, tfDefenseRating;
     
     // CONDITION MONITOR fields (future feature)
     // private JTextField tfPhysicalBoxes, tfStunBoxes;
     
     // SKILLS table and QUALITIES/CONTACTS tables
     private JTable tableSkills;
     private DefaultTableModel skillsTableModel;
     private JTable tableQualities;
     private DefaultTableModel qualitiesTableModel;
     private JTable tableContacts;
     private DefaultTableModel contactsTableModel;
     private JLabel lblSkillCount;
     private JLabel lblQualityCount;
-    private java.util.Map<String, double[]> metatypeMap = new java.util.LinkedHashMap<>();
+    private java.util.Map<String, double[]> metatypeMap = new java.util.LinkedHashMap<>();
+    private java.util.Map<String, Integer> metatypeKarmaMap = new java.util.LinkedHashMap<>();
+    private java.util.Map<String, Integer> surgeKarmaMap = new java.util.LinkedHashMap<>();
     private java.util.Map<String, String[]> archetypeMap = new java.util.LinkedHashMap<>();
     private java.util.Map<String, String[]> skillMap = new java.util.LinkedHashMap<>();
     private java.util.Map<String, String[]> specializationMap = new java.util.LinkedHashMap<>();
     private java.util.List<QualityEntry> qualityEntries = new java.util.ArrayList<>();
     private java.util.Set<Integer> lockedQualityRows = new java.util.HashSet<>();
 
-    private JTable tableKarmaLog;
-    private DefaultTableModel karmaLogModel;
+    private JTable tableKarmaLog;
+    private DefaultTableModel karmaLogModel;
+    private JLabel lblLoggedKarma;
 
     private static final String[] RANK_OPTIONS = {
             "1 - Novice",
             "2 - Advanced Beginner",
             "3 - Journeyman",
             "4 - Professional",
             "5 - Advanced Professional",
             "6 - Local Legend",
             "7 - Elite",
             "8 - Professional Elite",
             "9 - National Elite",
             "10 - Multinational Elite",
             "11 - Global Elite",
             "12 - GOAT"
     };
     
     // WEAPONS, ARMOR: future feature
     // private JTextArea taRangedWeapons, taMeleeWeapons, taArmor;
     
     // MATRIX STATS - future feature
     // private JTextField tfMatrixAttack, tfMatrixSleaze, tfMatrixDataProc, tfMatrixFirewall,
     //                    tfMatrixConditionBoxes;
     // private JTextArea taMatrixDevices;
     
     // AUGMENTATIONS - future feature
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index a52f03759130b0f1c06a04296268e3504c341691..358db19d1518381fd44bbb6378e13922a3c47b19 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -205,162 +208,170 @@ public class ShadowrunCharacterBuilderGUI {
         c.gridx = 5; panel.add(new JLabel("Height (ft):"), c);
         tfHeightFt = new JTextField(6); tfHeightFt.setEditable(false); c.gridx = 6; panel.add(tfHeightFt, c);
         row++;
 
         c.gridx = 0; c.gridy = row; panel.add(new JLabel("Metatype:"), c);
         cbMetatype = new JComboBox<>(); cbMetatype.setPreferredSize(leftDim);
         cbMetatype.setRenderer(new DefaultListCellRenderer() {
             public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                 JLabel lbl = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                 if (value instanceof MetaItem) {
                     MetaItem mi = (MetaItem) value;
                     String text = mi.name;
                     if (index >= 0 && mi.variant) text = " - " + text;
                     lbl.setText(text);
                 }
                 return lbl;
             }
         });
         c.gridx = 1; panel.add(cbMetatype, c);
         c.gridx = 3; panel.add(new JLabel("Weight (kg):"), c);
         tfWeight = new JTextField(5); c.gridx = 4; panel.add(tfWeight, c);
         c.gridx = 5; panel.add(new JLabel("Weight (lbs):"), c);
         tfWeightLbs = new JTextField(6); tfWeightLbs.setEditable(false); c.gridx = 6; panel.add(tfWeightLbs, c);
         row++;
 
-        c.gridx = 3; c.gridy = row; panel.add(new JLabel("Karma:"), c);
-        tfKarma = new JTextField(5); tfKarma.setText("50"); c.gridx = 4; panel.add(tfKarma, c);
-        c.gridx = 5; panel.add(new JLabel("Total Karma:"), c);
-        tfTotalKarma = new JTextField(6); tfTotalKarma.setEditable(false); c.gridx = 6; panel.add(tfTotalKarma, c);
-        row++;
-
-        chkSurge = new JCheckBox("SURGE");
-        chkSurge.setPreferredSize(leftDim);
-        c.gridx = 1; c.gridy = row; panel.add(chkSurge, c);
-        row++;
+        c.gridx = 3; c.gridy = row; panel.add(new JLabel("Karma:"), c);
+        tfKarma = new JTextField(5); tfKarma.setText("50"); c.gridx = 4; panel.add(tfKarma, c);
+        c.gridx = 5; panel.add(new JLabel("Total Karma:"), c);
+        tfTotalKarma = new JTextField(6); tfTotalKarma.setEditable(false); c.gridx = 6; panel.add(tfTotalKarma, c);
+
+        chkSurge = new JCheckBox("SURGE");
+        chkSurge.setPreferredSize(leftDim);
+        c.gridx = 1; c.gridy = row; panel.add(chkSurge, c);
+        row++;
 
         lblSurgeCollective = new JLabel("SURGE Collective:");
         cbSurgeCollective = new JComboBox<>();
         cbSurgeCollective.setPreferredSize(leftDim);
         c.gridx = 0; c.gridy = row; panel.add(lblSurgeCollective, c);
         c.gridx = 1; panel.add(cbSurgeCollective, c);
         lblSurgeCollective.setVisible(false);
         cbSurgeCollective.setVisible(false);
         row++;
 
         loadMetatypes();
         loadSurgeCollectives();
         loadArchetypes();
         cbRole.setSelectedIndex(-1);
         cbMetatype.setSelectedIndex(-1);
         cbGender.setSelectedIndex(-1);
 
         tfHeight.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
             public void insertUpdate(javax.swing.event.DocumentEvent e) { updateHeightFeet(); }
             public void removeUpdate(javax.swing.event.DocumentEvent e) { updateHeightFeet(); }
             public void changedUpdate(javax.swing.event.DocumentEvent e) { updateHeightFeet(); }
         });
         tfWeight.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
             public void insertUpdate(javax.swing.event.DocumentEvent e) { updateWeightLbs(); }
             public void removeUpdate(javax.swing.event.DocumentEvent e) { updateWeightLbs(); }
             public void changedUpdate(javax.swing.event.DocumentEvent e) { updateWeightLbs(); }
         });
 
-        chkSurge.addActionListener(e -> {
-            boolean sel = chkSurge.isSelected();
-            lblSurgeCollective.setVisible(sel);
-            cbSurgeCollective.setVisible(sel);
-            cbSurgeCollective.setSelectedItem("No Collective");
-            if (!sel) {
-                removeMetageneticQualities();
-            }
-        });
-
-        cbSurgeCollective.addActionListener(e -> {
-            if (chkSurge.isSelected()) {
-                String owner = (String) cbSurgeCollective.getSelectedItem();
-                loadRacialTraitsForCollective(owner);
-            }
-        });
+        chkSurge.addActionListener(e -> {
+            boolean sel = chkSurge.isSelected();
+            lblSurgeCollective.setVisible(sel);
+            cbSurgeCollective.setVisible(sel);
+            cbSurgeCollective.setSelectedItem("No Collective");
+            if (!sel) {
+                removeMetageneticQualities();
+                removeKarma("Base", "SURGE");
+            }
+        });
+
+        cbSurgeCollective.addActionListener(e -> {
+            if (chkSurge.isSelected()) {
+                String owner = (String) cbSurgeCollective.getSelectedItem();
+                loadRacialTraitsForCollective(owner);
+                if ("No Collective".equals(owner)) {
+                    removeKarma("Base", "SURGE");
+                } else {
+                    int cost = surgeKarmaMap.getOrDefault(owner, 0);
+                    addOrUpdateKarma("Base", "SURGE", cost);
+                }
+            }
+        });
 
         cbRole.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 String sel = (String) cbRole.getSelectedItem();
                 btnRoleInfo.setVisible(sel != null && !sel.isEmpty());
             }
         });
         btnRoleInfo.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 String sel = (String) cbRole.getSelectedItem();
                 if (sel != null && archetypeMap.containsKey(sel)) {
                     String[] vals = archetypeMap.get(sel);
                     JOptionPane.showMessageDialog(frame,
                             "Archetype: " + sel + "\nPrimary Focus: " + vals[2] + "\n" + vals[1],
                             "Archetype Info", JOptionPane.INFORMATION_MESSAGE);
                 }
             }
         });
 
         contentPanel.add(panel);
     }
 
     private void buildAttributesSection() {
         JPanel panel = new JPanel(new GridBagLayout());
         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Attributes", TitledBorder.LEFT, TitledBorder.TOP));
         GridBagConstraints c = new GridBagConstraints();
         c.insets = new Insets(4, 4, 4, 4);
         c.anchor = GridBagConstraints.NORTHWEST;
 
         JPanel physical = new JPanel(new GridBagLayout());
         physical.setBorder(BorderFactory.createTitledBorder("Physical"));
         GridBagConstraints pc = new GridBagConstraints();
         pc.insets = new Insets(2,2,2,2);
         pc.anchor = GridBagConstraints.WEST;
         int prow = 0;
-        pc.gridx = 0; pc.gridy = prow; physical.add(new JLabel("Body:"), pc);
-        spBody = new JSpinner(new SpinnerNumberModel(1, 1, null, 1)); pc.gridx = 1; physical.add(spBody, pc); prow++;
-        pc.gridx = 0; pc.gridy = prow; physical.add(new JLabel("Agility:"), pc);
-        spAgility = new JSpinner(new SpinnerNumberModel(1, 1, null, 1)); pc.gridx = 1; physical.add(spAgility, pc); prow++;
-        pc.gridx = 0; pc.gridy = prow; physical.add(new JLabel("Reaction:"), pc);
-        spReaction = new JSpinner(new SpinnerNumberModel(1, 1, null, 1)); pc.gridx = 1; physical.add(spReaction, pc); prow++;
-        pc.gridx = 0; pc.gridy = prow; physical.add(new JLabel("Strength:"), pc);
-        spStrength = new JSpinner(new SpinnerNumberModel(1, 1, null, 1)); pc.gridx = 1; physical.add(spStrength, pc);
+        pc.gridx = 0; pc.gridy = prow; physical.add(new JLabel("Body:"), pc);
+        spBody = new JSpinner(new SpinnerNumberModel(1, 1, null, 1));
+        Dimension attrDim = new Dimension(60, spBody.getPreferredSize().height);
+        spBody.setPreferredSize(attrDim); pc.gridx = 1; physical.add(spBody, pc); prow++;
+        pc.gridx = 0; pc.gridy = prow; physical.add(new JLabel("Agility:"), pc);
+        spAgility = new JSpinner(new SpinnerNumberModel(1, 1, null, 1)); spAgility.setPreferredSize(attrDim); pc.gridx = 1; physical.add(spAgility, pc); prow++;
+        pc.gridx = 0; pc.gridy = prow; physical.add(new JLabel("Reaction:"), pc);
+        spReaction = new JSpinner(new SpinnerNumberModel(1, 1, null, 1)); spReaction.setPreferredSize(attrDim); pc.gridx = 1; physical.add(spReaction, pc); prow++;
+        pc.gridx = 0; pc.gridy = prow; physical.add(new JLabel("Strength:"), pc);
+        spStrength = new JSpinner(new SpinnerNumberModel(1, 1, null, 1)); spStrength.setPreferredSize(attrDim); pc.gridx = 1; physical.add(spStrength, pc);
 
         JPanel mental = new JPanel(new GridBagLayout());
         mental.setBorder(BorderFactory.createTitledBorder("Mental"));
         GridBagConstraints mc = new GridBagConstraints();
         mc.insets = new Insets(2,2,2,2);
         mc.anchor = GridBagConstraints.WEST;
         int mrow = 0;
-        mc.gridx = 0; mc.gridy = mrow; mental.add(new JLabel("Willpower:"), mc);
-        spWillpower = new JSpinner(new SpinnerNumberModel(1, 1, null, 1)); mc.gridx = 1; mental.add(spWillpower, mc); mrow++;
-        mc.gridx = 0; mc.gridy = mrow; mental.add(new JLabel("Logic:"), mc);
-        spLogic = new JSpinner(new SpinnerNumberModel(1, 1, null, 1)); mc.gridx = 1; mental.add(spLogic, mc); mrow++;
-        mc.gridx = 0; mc.gridy = mrow; mental.add(new JLabel("Intuition:"), mc);
-        spIntuition = new JSpinner(new SpinnerNumberModel(1, 1, null, 1)); mc.gridx = 1; mental.add(spIntuition, mc); mrow++;
-        mc.gridx = 0; mc.gridy = mrow; mental.add(new JLabel("Charisma:"), mc);
-        spCharisma = new JSpinner(new SpinnerNumberModel(1, 1, null, 1)); mc.gridx = 1; mental.add(spCharisma, mc);
+        mc.gridx = 0; mc.gridy = mrow; mental.add(new JLabel("Willpower:"), mc);
+        spWillpower = new JSpinner(new SpinnerNumberModel(1, 1, null, 1)); spWillpower.setPreferredSize(attrDim); mc.gridx = 1; mental.add(spWillpower, mc); mrow++;
+        mc.gridx = 0; mc.gridy = mrow; mental.add(new JLabel("Logic:"), mc);
+        spLogic = new JSpinner(new SpinnerNumberModel(1, 1, null, 1)); spLogic.setPreferredSize(attrDim); mc.gridx = 1; mental.add(spLogic, mc); mrow++;
+        mc.gridx = 0; mc.gridy = mrow; mental.add(new JLabel("Intuition:"), mc);
+        spIntuition = new JSpinner(new SpinnerNumberModel(1, 1, null, 1)); spIntuition.setPreferredSize(attrDim); mc.gridx = 1; mental.add(spIntuition, mc); mrow++;
+        mc.gridx = 0; mc.gridy = mrow; mental.add(new JLabel("Charisma:"), mc);
+        spCharisma = new JSpinner(new SpinnerNumberModel(1, 1, null, 1)); spCharisma.setPreferredSize(attrDim); mc.gridx = 1; mental.add(spCharisma, mc);
 
         JPanel special = new JPanel(new GridBagLayout());
         special.setBorder(BorderFactory.createTitledBorder("Special"));
         GridBagConstraints sc = new GridBagConstraints();
         sc.insets = new Insets(2,2,2,2);
         sc.anchor = GridBagConstraints.WEST;
         int srow = 0;
         sc.gridx = 0; sc.gridy = srow; special.add(new JLabel("Edge:"), sc);
         spEdge = new JSpinner(new SpinnerNumberModel(1, 1, null, 1));
         Dimension specialDim = new Dimension(60, spEdge.getPreferredSize().height);
         spEdge.setPreferredSize(specialDim);
         sc.gridx = 1; special.add(spEdge, sc); srow++;
         sc.gridx = 0; sc.gridy = srow; special.add(new JLabel("Essence:"), sc);
         spEssence = new JSpinner(new SpinnerNumberModel(6.00, 0.01, 6.00, 0.01));
         spEssence.setPreferredSize(specialDim);
         sc.gridx = 1; special.add(spEssence, sc); srow++;
         sc.gridx = 0; sc.gridy = srow; special.add(new JLabel("Magic:"), sc);
         spMagic = new JSpinner(new SpinnerNumberModel(0, 0, null, 1));
         spMagic.setPreferredSize(specialDim);
         sc.gridx = 1; special.add(spMagic, sc); srow++;
         sc.gridx = 0; sc.gridy = srow; special.add(new JLabel("Resonance:"), sc);
         spResonance = new JSpinner(new SpinnerNumberModel(0, 0, null, 1));
         spResonance.setPreferredSize(specialDim);
         sc.gridx = 1; special.add(spResonance, sc);
 
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index a52f03759130b0f1c06a04296268e3504c341691..358db19d1518381fd44bbb6378e13922a3c47b19 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -529,101 +540,115 @@ private void buildConditionMonitorSection() {
         loadQualities();
 
         qualitiesTableModel.addTableModelListener(e -> {
             if (e.getType() != javax.swing.event.TableModelEvent.UPDATE) return;
             int row = e.getFirstRow();
             int col = e.getColumn();
             if (row < 0) return;
             if (col == 0) {
                 qualitiesTableModel.setValueAt("", row, 1);
                 qualitiesTableModel.setValueAt("", row, 2);
                 qualitiesTableModel.setValueAt("", row, 3);
             } else if (col == 1) {
                 Object qVal = qualitiesTableModel.getValueAt(row, 1);
                 if (qVal != null) {
                     for (QualityEntry qe : qualityEntries) {
                         if (qe.name.equals(qVal.toString())) {
                             qualitiesTableModel.setValueAt(qe.type, row, 2);
                             qualitiesTableModel.setValueAt(String.valueOf(qe.karma), row, 3);
                             break;
                         }
                     }
                 }
             }
         });
 
-        JButton btnAddQuality = new JButton("Add Quality");
-        btnAddQuality.addActionListener(new ActionListener() {
-            public void actionPerformed(ActionEvent e) {
-                qualitiesTableModel.addRow(new Object[]{"", "", "", ""});
-                updateQualityCount();
-            }
-        });
-        JButton btnRemoveQuality = new JButton("Remove Quality");
-        btnRemoveQuality.addActionListener(new ActionListener() {
-            public void actionPerformed(ActionEvent e) {
+        JButton btnAddQuality = new JButton("Add Quality");
+        JButton btnSaveQuality = new JButton("Save Quality");
+        CardLayout addSaveLayout = new CardLayout();
+        JPanel addSavePanel = new JPanel(addSaveLayout);
+        addSavePanel.add(btnAddQuality, "ADD");
+        addSavePanel.add(btnSaveQuality, "SAVE");
+        addSaveLayout.show(addSavePanel, "ADD");
+
+        btnAddQuality.addActionListener(new ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                qualitiesTableModel.addRow(new Object[]{"", "", "", ""});
+                int newRow = qualitiesTableModel.getRowCount() - 1;
+                tableQualities.setRowSelectionInterval(newRow, newRow);
+                updateQualityCount();
+                addSaveLayout.show(addSavePanel, "SAVE");
+            }
+        });
+        JButton btnRemoveQuality = new JButton("Remove Quality");
+        btnRemoveQuality.addActionListener(new ActionListener() {
+            public void actionPerformed(ActionEvent e) {
                 int row = tableQualities.getSelectedRow();
                 if (row != -1) {
                     int modelRow = tableQualities.convertRowIndexToModel(row);
                     Object cat = qualitiesTableModel.getValueAt(modelRow, 0);
                     if ("Metatype".equals(cat)) {
                         JOptionPane.showMessageDialog(frame,
                                 "ERROR: Qualities inherited from a Metatype cannot be removed.",
                                 "Error", JOptionPane.ERROR_MESSAGE);
                         return;
                     }
                     if ("Metagenetic".equals(cat)) {
                         JOptionPane.showMessageDialog(frame,
                                 "ERROR: Qualities inherited by SURGE Collective cannot be removed.",
                                 "Error", JOptionPane.ERROR_MESSAGE);
                         return;
                     }
                     qualitiesTableModel.removeRow(modelRow);
                     java.util.Set<Integer> newSet = new java.util.HashSet<>();
                     for (int r : lockedQualityRows) {
                         if (r == modelRow) continue;
                         newSet.add(r > modelRow ? r - 1 : r);
                     }
                     lockedQualityRows = newSet;
                     updateQualityCount();
                 }
             }
         });
-        JButton btnSaveQuality = new JButton("Save Quality");
-        btnSaveQuality.addActionListener(e -> {
-            int row = tableQualities.getSelectedRow();
-            if (row != -1) {
-                int modelRow = tableQualities.convertRowIndexToModel(row);
-                lockedQualityRows.add(modelRow);
-                tableQualities.clearSelection();
-            }
-        });
+        btnSaveQuality.addActionListener(e -> {
+            int row = tableQualities.getSelectedRow();
+            if (row != -1) {
+                int modelRow = tableQualities.convertRowIndexToModel(row);
+                lockedQualityRows.add(modelRow);
+                String name = (String) qualitiesTableModel.getValueAt(modelRow, 1);
+                String karmaStr = (String) qualitiesTableModel.getValueAt(modelRow, 3);
+                int cost = 0;
+                try { cost = Integer.parseInt(karmaStr); } catch(Exception ex) {}
+                addOrUpdateKarma("Quality", name == null ? "" : name, cost);
+                tableQualities.clearSelection();
+            }
+            addSaveLayout.show(addSavePanel, "ADD");
+        });
         lblQualityCount = new JLabel("0 qualities");
-        JPanel buttonSub = new JPanel(new FlowLayout(FlowLayout.LEFT));
-        buttonSub.add(btnAddQuality);
-        buttonSub.add(btnRemoveQuality);
-        buttonSub.add(btnSaveQuality);
+        JPanel buttonSub = new JPanel(new FlowLayout(FlowLayout.LEFT));
+        buttonSub.add(addSavePanel);
+        buttonSub.add(btnRemoveQuality);
         JPanel btnPanel = new JPanel(new BorderLayout());
         btnPanel.add(buttonSub, BorderLayout.WEST);
         btnPanel.add(lblQualityCount, BorderLayout.EAST);
 
         panel.add(new JLabel("Enter qualities:"), BorderLayout.NORTH);
         panel.add(sp, BorderLayout.CENTER);
         panel.add(btnPanel, BorderLayout.SOUTH);
         updateQualityCount();
         return panel;
     }
 
     private JPanel buildContactsSection() {
         JPanel panel = new JPanel(new BorderLayout());
         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Contacts", TitledBorder.LEFT, TitledBorder.TOP));
 
         contactsTableModel = new DefaultTableModel(new Object[]{"Name", "Loyalty", "Connection"}, 0);
         tableContacts = new JTable(contactsTableModel);
         tableContacts.setPreferredScrollableViewportSize(new Dimension(500, 150));
         JScrollPane sp = new JScrollPane(tableContacts);
 
         JButton btnAddContact = new JButton("Add Contact");
         btnAddContact.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 contactsTableModel.addRow(new Object[]{"", "", ""});
             }
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index a52f03759130b0f1c06a04296268e3504c341691..358db19d1518381fd44bbb6378e13922a3c47b19 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -658,149 +683,210 @@ private void buildConditionMonitorSection() {
         int row = 0;
         c.gridx = 0; c.gridy = row; panel.add(new JLabel("Nuyen:"), c);
         tfNuyen = new JTextField(10); c.gridx = 1; panel.add(tfNuyen, c);
         c.gridx = 2; panel.add(new JLabel("Primary Lifestyle:"), c);
         tfPrimaryLifestyle = new JTextField(15); c.gridx = 3; panel.add(tfPrimaryLifestyle, c);
         row++;
 
         c.gridx = 0; c.gridy = row; panel.add(new JLabel("Fake IDs / Lifestyles / Funds / Licenses:"), c);
         tfFakeIDs = new JTextField(25); c.gridx = 1; c.gridwidth = 3; panel.add(tfFakeIDs, c);
         c.gridwidth = 1; row++;
 
         return panel;
     }
 
     private JPanel buildNotesSection() {
         JPanel panel = new JPanel(new BorderLayout());
         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Notes", TitledBorder.LEFT, TitledBorder.TOP));
         taNotes = new JTextArea(4, 60);
         taNotes.setLineWrap(true);
         taNotes.setBorder(BorderFactory.createLineBorder(Color.GRAY));
         panel.add(new JScrollPane(taNotes), BorderLayout.CENTER);
         return panel;
     }
 
     private JPanel buildKarmaLogPanel() {
-        karmaLogModel = new DefaultTableModel(new Object[]{"Action", "Cost"}, 0) {
+        karmaLogModel = new DefaultTableModel(new Object[]{"Type", "Name", "Cost"}, 0) {
             public boolean isCellEditable(int r, int c) { return false; }
         };
-        tableKarmaLog = new JTable(karmaLogModel);
-        tableKarmaLog.setPreferredScrollableViewportSize(new Dimension(150, 500));
-        JScrollPane sp = new JScrollPane(tableKarmaLog);
-        JPanel panel = new JPanel(new BorderLayout());
-        panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Karma Log", TitledBorder.LEFT, TitledBorder.TOP));
-        panel.add(sp, BorderLayout.CENTER);
-        return panel;
-    }
+        tableKarmaLog = new JTable(karmaLogModel);
+        tableKarmaLog.setPreferredScrollableViewportSize(new Dimension(250, 500));
+        JScrollPane sp = new JScrollPane(tableKarmaLog);
+        JPanel panel = new JPanel(new BorderLayout());
+        panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Karma Log", TitledBorder.LEFT, TitledBorder.TOP));
+        panel.add(sp, BorderLayout.CENTER);
+        lblLoggedKarma = new JLabel("Logged Karma: 0");
+        JPanel south = new JPanel(new FlowLayout(FlowLayout.LEFT));
+        south.add(lblLoggedKarma);
+        panel.add(south, BorderLayout.SOUTH);
+        return panel;
+    }
 
     private void updateSkillCount() {
         if (lblSkillCount != null) {
             lblSkillCount.setText(skillsTableModel.getRowCount() + " skills");
         }
     }
 
-    private void updateQualityCount() {
-        if (lblQualityCount != null) {
-            lblQualityCount.setText(qualitiesTableModel.getRowCount() + " qualities");
-        }
-    }
+    private void updateQualityCount() {
+        if (lblQualityCount != null) {
+            lblQualityCount.setText(qualitiesTableModel.getRowCount() + " qualities");
+        }
+    }
+
+    private Integer findKarmaRow(String type, String name) {
+        for (int i = 0; i < karmaLogModel.getRowCount(); i++) {
+            Object t = karmaLogModel.getValueAt(i, 0);
+            Object n = karmaLogModel.getValueAt(i, 1);
+            if (type.equals(t) && name.equals(n)) {
+                return i;
+            }
+        }
+        return null;
+    }
+
+    private void addOrUpdateKarma(String type, String name, int cost) {
+        Integer row = findKarmaRow(type, name);
+        if (row == null) {
+            karmaLogModel.addRow(new Object[]{type, name, cost});
+        } else {
+            karmaLogModel.setValueAt(cost, row, 2);
+        }
+        updateLoggedKarma();
+    }
+
+    private void removeKarma(String type, String name) {
+        Integer row = findKarmaRow(type, name);
+        if (row != null) {
+            karmaLogModel.removeRow(row.intValue());
+        }
+        updateLoggedKarma();
+    }
+
+    private void updateLoggedKarma() {
+        int total = 0;
+        for (int i = 0; i < karmaLogModel.getRowCount(); i++) {
+            Object v = karmaLogModel.getValueAt(i, 2);
+            try {
+                total += Integer.parseInt(v.toString());
+            } catch (Exception ignored) {}
+        }
+        if (lblLoggedKarma != null) {
+            lblLoggedKarma.setText("Logged Karma: " + total);
+        }
+    }
 
     private void loadMetatypes() {
         cbMetatype.removeAllItems();
-        metatypeMap.clear();
+        metatypeMap.clear();
+        metatypeKarmaMap.clear();
         java.io.File file = new java.io.File("Shadowrun_Metatype.csv");
         if (!file.exists()) return;
         try (java.io.BufferedReader br = new java.io.BufferedReader(new java.io.FileReader(file))) {
             String line = br.readLine(); // skip header
-            java.util.List<String[]> mains = new java.util.ArrayList<>();
-            java.util.Map<String, java.util.List<String[]>> variants = new java.util.LinkedHashMap<>();
+            java.util.List<String[]> mains = new java.util.ArrayList<>();
+            java.util.Map<String, java.util.List<String[]>> variants = new java.util.LinkedHashMap<>();
             while ((line = br.readLine()) != null) {
                 String[] parts = line.split(",");
                 if (parts.length < 6) continue;
-                String name = parts[0].trim();
-                String type = parts[2].trim();
-                String root = parts[3].trim();
-                if (type.equals("Metahuman") || type.equals("Metasapient")) {
-                    mains.add(parts);
-                } else if (type.equals("Metavariant")) {
-                    variants.computeIfAbsent(root, k -> new java.util.ArrayList<>()).add(parts);
-                }
-            }
-            for (String[] m : mains) {
-                String name = m[0].trim();
-                double h = Double.parseDouble(m[4]);
-                double w = Double.parseDouble(m[5]);
-                MetaItem item = new MetaItem(name, false);
-                cbMetatype.addItem(item);
-                metatypeMap.put(name, new double[]{h, w});
-                java.util.List<String[]> varList = variants.get(name);
-                if (varList != null) {
-                    for (String[] v : varList) {
-                        String varName = v[0].trim();
-                        double vh = Double.parseDouble(v[4]);
-                        double vw = Double.parseDouble(v[5]);
-                        cbMetatype.addItem(new MetaItem(varName, true));
-                        metatypeMap.put(varName, new double[]{vh, vw});
-                    }
-                }
+                String name = parts[0].trim();
+                int karma = 0;
+                try { karma = Integer.parseInt(parts[1].trim()); } catch(Exception ex) {}
+                String type = parts[2].trim();
+                String root = parts[3].trim();
+                if (type.equals("Metahuman") || type.equals("Metasapient")) {
+                    mains.add(parts);
+                } else if (type.equals("Metavariant")) {
+                    variants.computeIfAbsent(root, k -> new java.util.ArrayList<>()).add(parts);
+                }
             }
-        } catch (Exception ignored) {}
+            for (String[] m : mains) {
+                String name = m[0].trim();
+                int karma = 0;
+                try { karma = Integer.parseInt(m[1].trim()); } catch(Exception ex) {}
+                double h = Double.parseDouble(m[4]);
+                double w = Double.parseDouble(m[5]);
+                MetaItem item = new MetaItem(name, false);
+                cbMetatype.addItem(item);
+                metatypeMap.put(name, new double[]{h, w});
+                metatypeKarmaMap.put(name, karma);
+                java.util.List<String[]> varList = variants.get(name);
+                if (varList != null) {
+                    for (String[] v : varList) {
+                        String varName = v[0].trim();
+                        int vkarma = 0;
+                        try { vkarma = Integer.parseInt(v[1].trim()); } catch(Exception ex) {}
+                        double vh = Double.parseDouble(v[4]);
+                        double vw = Double.parseDouble(v[5]);
+                        cbMetatype.addItem(new MetaItem(varName, true));
+                        metatypeMap.put(varName, new double[]{vh, vw});
+                        metatypeKarmaMap.put(varName, vkarma);
+                    }
+                }
+            }
+        } catch (Exception ignored) {}
 
         cbMetatype.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(java.awt.event.ActionEvent e) {
-                MetaItem item = (MetaItem) cbMetatype.getSelectedItem();
-                if (item != null && metatypeMap.containsKey(item.name)) {
-                    double[] vals = metatypeMap.get(item.name);
-                    tfHeight.setText(String.format("%.0f", vals[0]));
-                    tfWeight.setText(String.format("%.0f", vals[1]));
-                    updateHeightFeet();
-                    updateWeightLbs();
-                    loadRacialTraitsForMetatype(item.name);
-                }
+                MetaItem item = (MetaItem) cbMetatype.getSelectedItem();
+                if (item != null && metatypeMap.containsKey(item.name)) {
+                    double[] vals = metatypeMap.get(item.name);
+                    tfHeight.setText(String.format("%.0f", vals[0]));
+                    tfWeight.setText(String.format("%.0f", vals[1]));
+                    updateHeightFeet();
+                    updateWeightLbs();
+                    loadRacialTraitsForMetatype(item.name);
+                    int cost = metatypeKarmaMap.getOrDefault(item.name, 0);
+                    addOrUpdateKarma("Base", "Metatype", cost);
+                }
             }
         });
     }
 
     private void loadSurgeCollectives() {
-        cbSurgeCollective.removeAllItems();
-        cbSurgeCollective.addItem("No Collective");
-        java.io.File file = new java.io.File("Shadowrun_Metatype.csv");
-        if (!file.exists()) return;
-        try (java.io.BufferedReader br = new java.io.BufferedReader(new java.io.FileReader(file))) {
-            String line = br.readLine();
-            while ((line = br.readLine()) != null) {
-                String[] parts = line.split(",", -1);
-                if (parts.length >= 3) {
-                    String name = parts[0].trim();
-                    String type = parts[2].trim();
-                    if ("Changeling".equalsIgnoreCase(type)) {
-                        cbSurgeCollective.addItem(name);
-                    }
-                }
-            }
-        } catch (Exception ignored) {}
-    }
+        cbSurgeCollective.removeAllItems();
+        cbSurgeCollective.addItem("No Collective");
+        surgeKarmaMap.clear();
+        java.io.File file = new java.io.File("Shadowrun_Metatype.csv");
+        if (!file.exists()) return;
+        try (java.io.BufferedReader br = new java.io.BufferedReader(new java.io.FileReader(file))) {
+            String line = br.readLine();
+            while ((line = br.readLine()) != null) {
+                String[] parts = line.split(",", -1);
+                if (parts.length >= 3) {
+                    String name = parts[0].trim();
+                    int karma = 0;
+                    try { karma = Integer.parseInt(parts[1].trim()); } catch(Exception ex) {}
+                    String type = parts[2].trim();
+                    if ("Changeling".equalsIgnoreCase(type)) {
+                        cbSurgeCollective.addItem(name);
+                        surgeKarmaMap.put(name, karma);
+                    }
+                }
+            }
+        } catch (Exception ignored) {}
+    }
 
     private void updateHeightFeet() {
         try {
             double cm = Double.parseDouble(tfHeight.getText());
             int totalInches = (int) Math.round(cm / 2.54);
             int feet = totalInches / 12;
             int inches = totalInches % 12;
             tfHeightFt.setText(String.format("%d'%d\"", feet, inches));
         } catch (Exception ex) {
             tfHeightFt.setText("");
         }
     }
 
     private void updateWeightLbs() {
         try {
             double kg = Double.parseDouble(tfWeight.getText());
             int lbs = (int) Math.round(kg * 2.20462);
             tfWeightLbs.setText(String.valueOf(lbs));
         } catch (Exception ex) {
             tfWeightLbs.setText("");
         }
     }
 
     private void updateDerivedAttributes() {
         try {
 
EOF
)