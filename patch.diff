 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index a18643a22122d62673cfbd89d163c5d94e7782aa..567edcfd728ec6d7b3f18be88346928edaf1ee73 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -1048,68 +1048,72 @@ private void buildConditionMonitorSection() {
         c.gridy=2; c.gridx=0; panel.add(cbPosQual, c);
         c.gridx=1; panel.add(cbNegQual, c);
 
         while (true) {
             int opt = JOptionPane.showOptionDialog(frame, panel, title,
                     JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE,
                     null, new Object[]{"OK","Skip"}, "OK");
             if (opt != JOptionPane.OK_OPTION) return null;
             Object pq = cbPosQual.getSelectedItem();
             Object nq = cbNegQual.getSelectedItem();
             if (pq != null && nq != null) {
                 return new String[][]{
                         {(String) cbPosCat.getSelectedItem(), pq.toString()},
                         {(String) cbNegCat.getSelectedItem(), nq.toString()}
                 };
             }
             JOptionPane.showMessageDialog(frame,
                     "Both qualities must be selected or choose Skip.",
                     title, JOptionPane.ERROR_MESSAGE);
         }
     }
 
     private void setBaseAttributesForMetatype(String meta) {
         java.io.File file = new java.io.File("Shadowrun_Metatype.csv");
         if (!file.exists() || meta == null) return;
-        try (java.io.BufferedReader br = new java.io.BufferedReader(new java.io.FileReader(file))) {
-            String line = br.readLine();
-            while ((line = br.readLine()) != null) {
-                String[] p = line.split(",", -1);
-                if (p.length >= 15 && p[0].trim().equalsIgnoreCase(meta)) {
-                    if (!p[6].trim().isEmpty()) spBody.setValue(2);
-                    if (!p[7].trim().isEmpty()) spAgility.setValue(2);
-                    if (!p[8].trim().isEmpty()) spReaction.setValue(2);
-                    if (!p[9].trim().isEmpty()) spStrength.setValue(2);
-                    if (!p[10].trim().isEmpty()) spWillpower.setValue(2);
-                    if (!p[11].trim().isEmpty()) spLogic.setValue(2);
-                    if (!p[12].trim().isEmpty()) spIntuition.setValue(2);
-                    if (!p[13].trim().isEmpty()) spCharisma.setValue(2);
-                    if (!p[14].trim().isEmpty()) spEdge.setValue(2);
-                    break;
-                }
-            }
-        } catch (Exception ignored) {}
+        try (java.io.BufferedReader br = new java.io.BufferedReader(new java.io.FileReader(file))) {
+            String line = br.readLine();
+            while ((line = br.readLine()) != null) {
+                String[] p = line.split(",", -1);
+                if (p.length >= 15 && p[0].trim().equalsIgnoreCase(meta)) {
+                    try {
+                        if (!p[6].trim().isEmpty() && Integer.parseInt(p[6].trim()) > 6) spBody.setValue(2);
+                        if (!p[7].trim().isEmpty() && Integer.parseInt(p[7].trim()) > 6) spAgility.setValue(2);
+                        if (!p[8].trim().isEmpty() && Integer.parseInt(p[8].trim()) > 6) spReaction.setValue(2);
+                        if (!p[9].trim().isEmpty() && Integer.parseInt(p[9].trim()) > 6) spStrength.setValue(2);
+                        if (!p[10].trim().isEmpty() && Integer.parseInt(p[10].trim()) > 6) spWillpower.setValue(2);
+                        if (!p[11].trim().isEmpty() && Integer.parseInt(p[11].trim()) > 6) spLogic.setValue(2);
+                        if (!p[12].trim().isEmpty() && Integer.parseInt(p[12].trim()) > 6) spIntuition.setValue(2);
+                        if (!p[13].trim().isEmpty() && Integer.parseInt(p[13].trim()) > 6) spCharisma.setValue(2);
+                        if (!p[14].trim().isEmpty() && Integer.parseInt(p[14].trim()) > 6) spEdge.setValue(2);
+                    } catch (NumberFormatException ex) {
+                        // ignore malformed numbers
+                    }
+                    break;
+                }
+            }
+        } catch (Exception ignored) {}
         updateDerivedAttributes();
     }
 
     private void loadRacialTraitsForMetatype(String owner) {
         if (qualitiesTableModel == null) return;
         for (int i = qualitiesTableModel.getRowCount() - 1; i >= 0; i--) {
             Object cat = qualitiesTableModel.getValueAt(i, 0);
             if ("Metatype".equals(cat)) {
                 removeQualityRow(i);
             }
         }
         java.io.File file = new java.io.File("Shadowrun_RacialTraits.csv");
         if (!file.exists()) { updateQualityCount(); return; }
         try (java.io.BufferedReader br = new java.io.BufferedReader(new java.io.FileReader(file))) {
             String line = br.readLine();
             while ((line = br.readLine()) != null) {
                 String[] parts = line.split(",(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)", -1);
                 if (parts.length >= 3 && parts[2].trim().equalsIgnoreCase(owner)) {
                     String trait = parts[0].replaceAll("^\"|\"$", "").trim();
                     String type = parts[1].trim();
                     qualitiesTableModel.addRow(new Object[]{"Metatype", trait, type, "0"});
                 }
             }
         } catch (Exception ignored) {}
         updateQualityCount();
 
EOF
)