 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index a851aed3ca43b7e803a0322f509414ab0ec5819c..bcd2fcd64bf54e7d22c623914bf5d78e69c097dd 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -164,81 +164,79 @@ public class ShadowrunCharacterBuilderGUI {
         buildPersonalDataSection();
         buildAttributesSection();
         // buildConditionMonitorSection(); // TODO expand later
 
         tabs = new JTabbedPane();
         tabs.setPreferredSize(new Dimension(850, 250));
         tabs.addTab("Skills", buildSkillsSection());
         tabs.addTab("Qualities", buildQualitiesSection());
         tabs.addTab("Contacts", buildContactsSection());
         tabs.addTab("Lifestyle", buildLifestyleSection());
         tabs.addTab("Notes", buildNotesSection());
         contentPanel.add(tabs);
 
         // Life Path Wizard and Generate buttons
         JButton btnWizard = new JButton("Run Life Path Wizard");
         btnWizard.setAlignmentX(Component.CENTER_ALIGNMENT);
         btnWizard.addActionListener(e -> runLifePathWizard());
 
         JButton btnGenerate = new JButton("Generate Report");
         btnGenerate.setAlignmentX(Component.CENTER_ALIGNMENT);
         btnGenerate.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 generateReport();
             }
         });
-        contentPanel.add(Box.createRigidArea(new Dimension(0, 10)));
-        contentPanel.add(btnWizard);
-        contentPanel.add(Box.createRigidArea(new Dimension(0, 10)));
-        contentPanel.add(btnGenerate);
-        contentPanel.add(Box.createRigidArea(new Dimension(0, 10)));
-
-        scrollPane = new JScrollPane(contentPanel);
-        karmaLogPanel = buildKarmaLogPanel();
-        karmaLogPanel.setVisible(false);
-        wizardPanel = buildWizardPanel();
-        wizardPanel.setVisible(false);
-        btnToggleKarmaLog = new JButton("Karma Log >>>");
-        btnToggleKarmaLog.addActionListener(e -> {
-            boolean vis = karmaLogPanel.isVisible();
-            karmaLogPanel.setVisible(!vis);
-            btnToggleKarmaLog.setText(vis ? "Karma Log >>>" : "<<< Karma Log");
-            frame.revalidate();
-        });
-        JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
-        topPanel.add(btnToggleKarmaLog);
-
-        JPanel mainPanel = new JPanel(new BorderLayout());
-        mainPanel.add(scrollPane, BorderLayout.CENTER);
-        mainPanel.add(wizardPanel, BorderLayout.EAST);
-
-        JPanel rootPanel = new JPanel(new BorderLayout());
-        rootPanel.add(topPanel, BorderLayout.NORTH);
-        rootPanel.add(mainPanel, BorderLayout.CENTER);
-        rootPanel.add(karmaLogPanel, BorderLayout.EAST);
-        frame.getContentPane().add(rootPanel);
-        frame.setVisible(true);
+        btnToggleKarmaLog = new JButton("Karma Log >>>");
+        btnToggleKarmaLog.addActionListener(e -> {
+            boolean vis = karmaLogPanel.isVisible();
+            karmaLogPanel.setVisible(!vis);
+            btnToggleKarmaLog.setText(vis ? "Karma Log >>>" : "<<< Karma Log");
+            frame.revalidate();
+        });
+
+        JPanel bottomButtons = new JPanel(new FlowLayout(FlowLayout.CENTER));
+        bottomButtons.add(btnWizard);
+        bottomButtons.add(btnGenerate);
+        bottomButtons.add(btnToggleKarmaLog);
+
+        scrollPane = new JScrollPane(contentPanel);
+        karmaLogPanel = buildKarmaLogPanel();
+        karmaLogPanel.setVisible(false);
+        wizardPanel = buildWizardPanel();
+        wizardPanel.setVisible(false);
+
+        JPanel mainPanel = new JPanel(new BorderLayout());
+        mainPanel.add(scrollPane, BorderLayout.CENTER);
+        mainPanel.add(wizardPanel, BorderLayout.EAST);
+
+        JPanel rootPanel = new JPanel(new BorderLayout());
+        rootPanel.add(mainPanel, BorderLayout.CENTER);
+        rootPanel.add(karmaLogPanel, BorderLayout.EAST);
+        rootPanel.add(bottomButtons, BorderLayout.SOUTH);
+        frame.getContentPane().add(rootPanel);
+        frame.setVisible(true);
     }
 
     private void buildPersonalDataSection() {
         JPanel panel = new JPanel(new GridBagLayout());
         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Personal Data", TitledBorder.LEFT, TitledBorder.TOP));
         GridBagConstraints c = new GridBagConstraints();
         c.insets = new Insets(4, 4, 4, 4);
         c.anchor = GridBagConstraints.WEST;
 
         int row = 0;
         c.gridx = 0; c.gridy = row; panel.add(new JLabel("Character Name:"), c);
         tfName = new JTextField(15); c.gridx = 1; panel.add(tfName, c);
         Dimension leftDim = new Dimension(150, tfName.getPreferredSize().height);
         tfName.setPreferredSize(leftDim);
         c.gridx = 2; panel.add(new JLabel("Gender:"), c);
         cbGender = new JComboBox<>(new String[]{"Male", "Female"}); c.gridx = 3; panel.add(cbGender, c);
         row++;
 
         c.gridx = 0; c.gridy = row; panel.add(new JLabel("Player Name:"), c);
         tfPlayer = new JTextField(15); tfPlayer.setPreferredSize(leftDim); c.gridx = 1; panel.add(tfPlayer, c);
         c.gridx = 2; panel.add(new JLabel("Age:"), c);
         tfAge = new JTextField(5); c.gridx = 3; panel.add(tfAge, c);
         row++;
 
         c.gridx = 0; c.gridy = row; panel.add(new JLabel("Status:"), c);
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index a851aed3ca43b7e803a0322f509414ab0ec5819c..bcd2fcd64bf54e7d22c623914bf5d78e69c097dd 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -510,64 +508,94 @@ private void buildConditionMonitorSection() {
             if (e.getType() == javax.swing.event.TableModelEvent.UPDATE && e.getColumn() == 1) {
                 int r = e.getFirstRow();
                 Object val = skillsTableModel.getValueAt(r, 1);
                 if (val != null && skillMap.containsKey(val.toString())) {
                     String[] info = skillMap.get(val.toString());
                     skillsTableModel.setValueAt("General", r, 0);
                     skillsTableModel.setValueAt(info[0], r, 3);
                     skillsTableModel.setValueAt(info[1], r, 4);
                 } else {
                     skillsTableModel.setValueAt("", r, 0);
                     skillsTableModel.setValueAt("", r, 3);
                     skillsTableModel.setValueAt("", r, 4);
                 }
             }
         });
 
         JScrollPane sp = new JScrollPane(tableSkills);
         tableSkills.setPreferredScrollableViewportSize(new Dimension(500, 150));
 
         JButton btnAddSkill = new JButton("Add Skill");
         btnAddSkill.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 showAddSkillDialog();
             }
         });
-        JButton btnRemoveSkill = new JButton("Remove Skill");
-        btnRemoveSkill.addActionListener(new ActionListener() {
-            public void actionPerformed(ActionEvent e) {
-                int row = tableSkills.getSelectedRow();
-                if (row != -1) {
-                    skillsTableModel.removeRow(row);
-                    updateSkillCount();
-                }
-            }
-        });
-        lblSkillCount = new JLabel("0 skills");
-        JPanel buttonSub = new JPanel(new FlowLayout(FlowLayout.LEFT));
-        buttonSub.add(btnAddSkill);
-        buttonSub.add(btnRemoveSkill);
+        JButton btnRemoveSkill = new JButton("Remove Skill");
+        btnRemoveSkill.addActionListener(new ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                int row = tableSkills.getSelectedRow();
+                if (row != -1) {
+                    skillsTableModel.removeRow(row);
+                    updateSkillCount();
+                }
+            }
+        });
+        JButton btnRaiseSkill = new JButton("Raise Skill");
+        btnRaiseSkill.addActionListener(e -> {
+            int row = tableSkills.getSelectedRow();
+            if (row != -1) {
+                int modelRow = tableSkills.convertRowIndexToModel(row);
+                Object rankObj = skillsTableModel.getValueAt(modelRow, 2);
+                if (rankObj != null) {
+                    int idx = java.util.Arrays.asList(RANK_OPTIONS).indexOf(rankObj.toString());
+                    if (idx >= 0 && idx < RANK_OPTIONS.length - 1) {
+                        skillsTableModel.setValueAt(RANK_OPTIONS[idx + 1], modelRow, 2);
+                    }
+                }
+            }
+        });
+        JButton btnLowerSkill = new JButton("Lower Skill");
+        btnLowerSkill.addActionListener(e -> {
+            int row = tableSkills.getSelectedRow();
+            if (row != -1) {
+                int modelRow = tableSkills.convertRowIndexToModel(row);
+                Object rankObj = skillsTableModel.getValueAt(modelRow, 2);
+                if (rankObj != null) {
+                    int idx = java.util.Arrays.asList(RANK_OPTIONS).indexOf(rankObj.toString());
+                    if (idx > 0) {
+                        skillsTableModel.setValueAt(RANK_OPTIONS[idx - 1], modelRow, 2);
+                    }
+                }
+            }
+        });
+        lblSkillCount = new JLabel("0 skills");
+        JPanel buttonSub = new JPanel(new FlowLayout(FlowLayout.LEFT));
+        buttonSub.add(btnAddSkill);
+        buttonSub.add(btnRemoveSkill);
+        buttonSub.add(btnRaiseSkill);
+        buttonSub.add(btnLowerSkill);
         JPanel btnPanel = new JPanel(new BorderLayout());
         btnPanel.add(buttonSub, BorderLayout.WEST);
         btnPanel.add(lblSkillCount, BorderLayout.EAST);
 
         panel.add(new JLabel("Enter skills:"), BorderLayout.NORTH);
         panel.add(sp, BorderLayout.CENTER);
         panel.add(btnPanel, BorderLayout.SOUTH);
         updateSkillCount();
         return panel;
     }
 
     private JPanel buildQualitiesSection() {
         JPanel panel = new JPanel(new BorderLayout());
         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Qualities", TitledBorder.LEFT, TitledBorder.TOP));
 
         qualitiesTableModel = new DefaultTableModel(new Object[]{"Category", "Type", "Quality", "Karma"}, 0) {
             public boolean isCellEditable(int r, int c) {
                 return r == editingQualityRow && c < 3;
             }
         };
         tableQualities = new JTable(qualitiesTableModel);
         tableQualities.setAutoCreateRowSorter(true);
         tableQualities.setPreferredScrollableViewportSize(new Dimension(500, 150));
 
         String[] qualityCats = {"Magic","Matrix","Mental","Metagenic","Physical","Social","Vehicle"};
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index a851aed3ca43b7e803a0322f509414ab0ec5819c..bcd2fcd64bf54e7d22c623914bf5d78e69c097dd 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -645,55 +673,58 @@ private void buildConditionMonitorSection() {
                 if (row != -1) {
                     int modelRow = tableQualities.convertRowIndexToModel(row);
                     Object cat = qualitiesTableModel.getValueAt(modelRow, 0);
                     if ("Metatype".equals(cat)) {
                         JOptionPane.showMessageDialog(frame,
                                 "ERROR: Qualities inherited from a Metatype cannot be removed.",
                                 "Error", JOptionPane.ERROR_MESSAGE);
                         return;
                     }
                     if ("Metagenic".equals(cat)) {
                         JOptionPane.showMessageDialog(frame,
                                 "ERROR: Qualities inherited by SURGE Collective cannot be removed.",
                                 "Error", JOptionPane.ERROR_MESSAGE);
                         return;
                     }
                     removeQualityRow(modelRow);
                     if (editingQualityRow == modelRow) {
                         editingQualityRow = -1;
                     } else if (editingQualityRow > modelRow) {
                         editingQualityRow--;
                     }
                     updateQualityCount();
                 }
             }
         });
-        btnSaveQuality.addActionListener(e -> {
-            if (editingQualityRow != -1) {
-                int modelRow = editingQualityRow;
-                String name = (String) qualitiesTableModel.getValueAt(modelRow, 2);
-                String karmaStr = (String) qualitiesTableModel.getValueAt(modelRow, 3);
+        btnSaveQuality.addActionListener(e -> {
+            if (editingQualityRow != -1) {
+                if (tableQualities.isEditing()) {
+                    tableQualities.getCellEditor().stopCellEditing();
+                }
+                int modelRow = editingQualityRow;
+                String name = (String) qualitiesTableModel.getValueAt(modelRow, 2);
+                String karmaStr = (String) qualitiesTableModel.getValueAt(modelRow, 3);
                 int cost = 0;
                 try { cost = Integer.parseInt(karmaStr); } catch (Exception ex) {}
                 addOrUpdateKarma("Quality", name == null ? "" : name, cost);
                 tableQualities.clearSelection();
                 editingQualityRow = -1;
             }
             addSaveLayout.show(addSavePanel, "ADD");
         });
         lblQualityCount = new JLabel("0 qualities");
         JPanel buttonSub = new JPanel(new FlowLayout(FlowLayout.LEFT));
         buttonSub.add(addSavePanel);
         buttonSub.add(btnRemoveQuality);
         JPanel btnPanel = new JPanel(new BorderLayout());
         btnPanel.add(buttonSub, BorderLayout.WEST);
         btnPanel.add(lblQualityCount, BorderLayout.EAST);
 
         panel.add(new JLabel("Enter qualities:"), BorderLayout.NORTH);
         panel.add(sp, BorderLayout.CENTER);
         panel.add(btnPanel, BorderLayout.SOUTH);
         updateQualityCount();
         return panel;
     }
 
     private JPanel buildContactsSection() {
         JPanel panel = new JPanel(new BorderLayout());
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index a851aed3ca43b7e803a0322f509414ab0ec5819c..bcd2fcd64bf54e7d22c623914bf5d78e69c097dd 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -1362,82 +1393,86 @@ private void buildConditionMonitorSection() {
             }
         } catch (Exception ignored) {}
     }
 
     private void showAddSkillDialog() {
         JDialog dialog = new JDialog(frame, "Add Skill Dialog", true);
         JPanel main = new JPanel(new GridBagLayout());
         GridBagConstraints c = new GridBagConstraints();
         c.insets = new Insets(4,4,4,4);
         c.anchor = GridBagConstraints.WEST;
         int row = 0;
 
         c.gridx = 0; c.gridy = row; main.add(new JLabel("Type:"), c);
         JComboBox<String> cbType = new JComboBox<>(new String[]{"General","Specialization","Knowledge","Language"});
         c.gridx = 1; main.add(cbType, c); row++;
 
         CardLayout cl = new CardLayout();
         JPanel cards = new JPanel(cl);
 
         // General card
         JPanel general = new JPanel(new GridBagLayout());
         GridBagConstraints gc = new GridBagConstraints();
         gc.insets = new Insets(2,2,2,2); gc.anchor = GridBagConstraints.WEST;
         int gr = 0;
         gc.gridx=0; gc.gridy=gr; general.add(new JLabel("Skill Name:"), gc);
-        JComboBox<String> cbGenSkill = new JComboBox<>(skillMap.keySet().toArray(new String[0]));
+        java.util.List<String> genSkills = new java.util.ArrayList<>(skillMap.keySet());
+        java.util.Collections.sort(genSkills);
+        JComboBox<String> cbGenSkill = new JComboBox<>(genSkills.toArray(new String[0]));
         gc.gridx=1; general.add(cbGenSkill, gc); gr++;
         gc.gridx=0; gc.gridy=gr; general.add(new JLabel("Category:"), gc);
         JTextField tfGenCat = new JTextField(15); tfGenCat.setEditable(false);
         gc.gridx=1; general.add(tfGenCat, gc); gr++;
         gc.gridx=0; gc.gridy=gr; general.add(new JLabel("Primary Attribute:"), gc);
         JTextField tfGenAttr = new JTextField(15); tfGenAttr.setEditable(false);
         gc.gridx=1; general.add(tfGenAttr, gc); gr++;
         gc.gridx=0; gc.gridy=gr; general.add(new JLabel("Rank:"), gc);
         JComboBox<String> cbGenRank = new JComboBox<>(RANK_OPTIONS);
         gc.gridx=1; general.add(cbGenRank, gc);
 
         cbGenSkill.addActionListener(e -> {
             String s = (String) cbGenSkill.getSelectedItem();
             if (s != null && skillMap.containsKey(s)) {
                 String[] info = skillMap.get(s);
                 tfGenAttr.setText(info[0]);
                 tfGenCat.setText(info[1]);
             } else {
                 tfGenAttr.setText("");
                 tfGenCat.setText("");
             }
         });
         if(cbGenSkill.getItemCount()>0) cbGenSkill.setSelectedIndex(0);
 
         // Specialization card
         JPanel spec = new JPanel(new GridBagLayout());
         GridBagConstraints sc = new GridBagConstraints();
         sc.insets = new Insets(2,2,2,2); sc.anchor = GridBagConstraints.WEST;
         int sr = 0;
         sc.gridx=0; sc.gridy=sr; spec.add(new JLabel("Specialization:"), sc);
-        JComboBox<String> cbSpec = new JComboBox<>(specializationMap.keySet().toArray(new String[0]));
+        java.util.List<String> specSkills = new java.util.ArrayList<>(specializationMap.keySet());
+        java.util.Collections.sort(specSkills);
+        JComboBox<String> cbSpec = new JComboBox<>(specSkills.toArray(new String[0]));
         sc.gridx=1; spec.add(cbSpec, sc); sr++;
         sc.gridx=0; sc.gridy=sr; spec.add(new JLabel("Parent Skill:"), sc);
         JTextField tfParent = new JTextField(15); tfParent.setEditable(false);
         sc.gridx=1; spec.add(tfParent, sc); sr++;
         sc.gridx=0; sc.gridy=sr; spec.add(new JLabel("Category:"), sc);
         JTextField tfSpecCat = new JTextField(15); tfSpecCat.setEditable(false);
         sc.gridx=1; spec.add(tfSpecCat, sc); sr++;
         sc.gridx=0; sc.gridy=sr; spec.add(new JLabel("Primary Attribute:"), sc);
         JTextField tfSpecAttr = new JTextField(15); tfSpecAttr.setEditable(false);
         sc.gridx=1; spec.add(tfSpecAttr, sc); sr++;
         sc.gridx=0; sc.gridy=sr; spec.add(new JLabel("Rank:"), sc);
         JComboBox<String> cbSpecRank = new JComboBox<>(RANK_OPTIONS);
         sc.gridx=1; spec.add(cbSpecRank, sc);
 
         cbSpec.addActionListener(e -> {
             String s = (String) cbSpec.getSelectedItem();
             if (s != null && specializationMap.containsKey(s)) {
                 String[] info = specializationMap.get(s);
                 tfParent.setText(info[0]);
                 tfSpecAttr.setText(info[1]);
                 tfSpecCat.setText(info[2]);
             } else {
                 tfParent.setText("");
                 tfSpecAttr.setText("");
                 tfSpecCat.setText("");
 
EOF
)