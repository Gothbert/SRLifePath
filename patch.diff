 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index f5814b60be84a2580a87f11e653b24c551d3d996..5039c0edd398cbeef70af5d88107c10f96905457 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -1,92 +1,96 @@
 import javax.swing.*;
 import javax.swing.border.TitledBorder;
 import javax.swing.table.DefaultTableModel;
 import javax.swing.table.TableColumn;
 import javax.swing.event.ChangeListener;
 import java.awt.*;
 import java.awt.event.*;
 import java.io.BufferedWriter;
 import java.io.FileWriter;
 import java.io.IOException;
 
 /**
  * Shadowrun 6e Character Builder with GUI
  * 
  * This program launches a Swing-based interface that mimics the layout and appearance of the
  * two-page Shadowrun 6th Edition character sheet PDF. Users can fill out fields directly and
  * generate a formatted character report.
  */
 public class ShadowrunCharacterBuilderGUI {
     private JFrame frame;
     private JPanel contentPanel;
     private JScrollPane scrollPane;
     private JTabbedPane tabs;
     
     // PERSONAL DATA fields
-    private JTextField tfName, tfPlayer, tfAge,
-                       tfHeight, tfHeightFt, tfWeight, tfWeightLbs,
-                       tfKarma, tfTotalKarma;
-    private JComboBox<String> cbRole;
+    private JTextField tfName, tfPlayer, tfAge, tfNationality,
+                       tfHeight, tfHeightFt, tfWeight, tfWeightLbs,
+                       tfKarma, tfTotalKarma;
+    private JComboBox<String> cbRole;
+    private JComboBox<String> cbStatus;
     private JComboBox<MetaItem> cbMetatype;
     private JCheckBox chkSurge;
     private JLabel lblSurgeCollective;
     private JComboBox<String> cbSurgeCollective;
     private JComboBox<String> cbGender;
     private JTextField tfNuyen, tfPrimaryLifestyle, tfFakeIDs;
     private JTextArea taNotes;
     
     // ATTRIBUTES fields
     private JSpinner spBody, spAgility, spReaction, spStrength,
                      spWillpower, spLogic, spIntuition, spCharisma,
                      spEdge, spEssence, spMagic, spResonance;
     private JTextField tfComposure, tfJudgeIntentions, tfMemory, tfLiftCarry;
     // TODO later: initiative and other derived stats
     // private JTextField tfInitiative, tfMatrixInitiative, tfAstralInitiative,
     //                    tfJudgeIntentions, tfMemory, tfLiftCarry, tfMovement,
     //                    tfUnarmedAR, tfDefenseRating;
     
     // CONDITION MONITOR fields (future feature)
     // private JTextField tfPhysicalBoxes, tfStunBoxes;
     
     // SKILLS table and QUALITIES/CONTACTS tables
     private JTable tableSkills;
     private DefaultTableModel skillsTableModel;
     private JTable tableQualities;
     private DefaultTableModel qualitiesTableModel;
     private JTable tableContacts;
     private DefaultTableModel contactsTableModel;
     private JLabel lblSkillCount;
     private JLabel lblQualityCount;
     private java.util.Map<String, double[]> metatypeMap = new java.util.LinkedHashMap<>();
     private java.util.Map<String, Integer> metatypeKarmaMap = new java.util.LinkedHashMap<>();
     private java.util.Map<String, Integer> surgeKarmaMap = new java.util.LinkedHashMap<>();
     private java.util.Map<String, String[]> archetypeMap = new java.util.LinkedHashMap<>();
     private java.util.Map<String, String[]> skillMap = new java.util.LinkedHashMap<>();
-    private java.util.Map<String, String[]> specializationMap = new java.util.LinkedHashMap<>();
-    private java.util.List<QualityEntry> qualityEntries = new java.util.ArrayList<>();
-    private java.util.Set<Integer> lockedQualityRows = new java.util.HashSet<>();
+    private java.util.Map<String, String[]> specializationMap = new java.util.LinkedHashMap<>();
+    private java.util.List<QualityEntry> qualityEntries = new java.util.ArrayList<>();
+    private java.util.Set<Integer> lockedQualityRows = new java.util.HashSet<>();
+
+    private String lastSurgeCollective = null;
+    private String lastMetatype = null;
 
     private JTable tableKarmaLog;
     private DefaultTableModel karmaLogModel;
     private JLabel lblLoggedKarma;
 
     private static final String[] RANK_OPTIONS = {
             "1 - Novice",
             "2 - Advanced Beginner",
             "3 - Journeyman",
             "4 - Professional",
             "5 - Advanced Professional",
             "6 - Local Legend",
             "7 - Elite",
             "8 - Professional Elite",
             "9 - National Elite",
             "10 - Multinational Elite",
             "11 - Global Elite",
             "12 - GOAT"
     };
     
     // WEAPONS, ARMOR: future feature
     // private JTextArea taRangedWeapons, taMeleeWeapons, taArmor;
     
     // MATRIX STATS - future feature
     // private JTextField tfMatrixAttack, tfMatrixSleaze, tfMatrixDataProc, tfMatrixFirewall,
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index f5814b60be84a2580a87f11e653b24c551d3d996..5039c0edd398cbeef70af5d88107c10f96905457 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -169,55 +173,62 @@ public class ShadowrunCharacterBuilderGUI {
 
         scrollPane = new JScrollPane(contentPanel);
         JPanel rootPanel = new JPanel(new BorderLayout());
         rootPanel.add(scrollPane, BorderLayout.CENTER);
         rootPanel.add(buildKarmaLogPanel(), BorderLayout.EAST);
         frame.getContentPane().add(rootPanel);
         frame.setVisible(true);
     }
 
     private void buildPersonalDataSection() {
         JPanel panel = new JPanel(new GridBagLayout());
         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Personal Data", TitledBorder.LEFT, TitledBorder.TOP));
         GridBagConstraints c = new GridBagConstraints();
         c.insets = new Insets(4, 4, 4, 4);
         c.anchor = GridBagConstraints.WEST;
 
         int row = 0;
         c.gridx = 0; c.gridy = row; panel.add(new JLabel("Character Name:"), c);
         tfName = new JTextField(15); c.gridx = 1; panel.add(tfName, c);
         Dimension leftDim = new Dimension(150, tfName.getPreferredSize().height);
         tfName.setPreferredSize(leftDim);
         c.gridx = 2; panel.add(new JLabel("Gender:"), c);
         cbGender = new JComboBox<>(new String[]{"Male", "Female"}); c.gridx = 3; panel.add(cbGender, c);
         row++;
 
-        c.gridx = 0; c.gridy = row; panel.add(new JLabel("Player Name:"), c);
-        tfPlayer = new JTextField(15); tfPlayer.setPreferredSize(leftDim); c.gridx = 1; panel.add(tfPlayer, c);
-        c.gridx = 2; panel.add(new JLabel("Age:"), c);
-        tfAge = new JTextField(5); c.gridx = 3; panel.add(tfAge, c);
-        row++;
+        c.gridx = 0; c.gridy = row; panel.add(new JLabel("Player Name:"), c);
+        tfPlayer = new JTextField(15); tfPlayer.setPreferredSize(leftDim); c.gridx = 1; panel.add(tfPlayer, c);
+        c.gridx = 2; panel.add(new JLabel("Age:"), c);
+        tfAge = new JTextField(5); c.gridx = 3; panel.add(tfAge, c);
+        row++;
+
+        c.gridx = 0; c.gridy = row; panel.add(new JLabel("Nationality:"), c);
+        tfNationality = new JTextField(15); tfNationality.setPreferredSize(leftDim); c.gridx = 1; panel.add(tfNationality, c);
+        c.gridx = 2; panel.add(new JLabel("Status:"), c);
+        cbStatus = new JComboBox<>(new String[]{"Mundane","Full Magician","Aspected Magician","Mystic Adept","Adept","Technomancer"});
+        c.gridx = 3; panel.add(cbStatus, c);
+        row++;
 
         c.gridx = 0; c.gridy = row; panel.add(new JLabel("Archetype/Role:"), c);
         cbRole = new JComboBox<>(); cbRole.setPreferredSize(leftDim); c.gridx = 1; panel.add(cbRole, c);
         JButton btnRoleInfo = new JButton("\u2139");
         btnRoleInfo.setMargin(new Insets(0,0,0,0));
         btnRoleInfo.setVisible(false);
         c.gridx = 2; panel.add(btnRoleInfo, c);
         c.gridx = 3; panel.add(new JLabel("Height (cm):"), c);
         tfHeight = new JTextField(5); c.gridx = 4; panel.add(tfHeight, c);
         c.gridx = 5; panel.add(new JLabel("Height (ft):"), c);
         tfHeightFt = new JTextField(6); tfHeightFt.setEditable(false); c.gridx = 6; panel.add(tfHeightFt, c);
         row++;
 
         c.gridx = 0; c.gridy = row; panel.add(new JLabel("Metatype:"), c);
         cbMetatype = new JComboBox<>(); cbMetatype.setPreferredSize(leftDim);
         cbMetatype.setRenderer(new DefaultListCellRenderer() {
             public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                 JLabel lbl = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                 if (value instanceof MetaItem) {
                     MetaItem mi = (MetaItem) value;
                     String text = mi.name;
                     if (index >= 0 && mi.variant) text = " - " + text;
                     lbl.setText(text);
                 }
                 return lbl;
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index f5814b60be84a2580a87f11e653b24c551d3d996..5039c0edd398cbeef70af5d88107c10f96905457 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -229,89 +240,97 @@ public class ShadowrunCharacterBuilderGUI {
         c.gridx = 5; panel.add(new JLabel("Weight (lbs):"), c);
         tfWeightLbs = new JTextField(6); tfWeightLbs.setEditable(false); c.gridx = 6; panel.add(tfWeightLbs, c);
         row++;
 
         c.gridx = 3; c.gridy = row; panel.add(new JLabel("Karma:"), c);
         tfKarma = new JTextField(5); tfKarma.setText("50"); c.gridx = 4; panel.add(tfKarma, c);
         c.gridx = 5; panel.add(new JLabel("Total Karma:"), c);
         tfTotalKarma = new JTextField(6); tfTotalKarma.setEditable(false); c.gridx = 6; panel.add(tfTotalKarma, c);
 
         chkSurge = new JCheckBox("SURGE");
         chkSurge.setPreferredSize(leftDim);
         c.gridx = 1; c.gridy = row; panel.add(chkSurge, c);
         row++;
 
         lblSurgeCollective = new JLabel("SURGE Collective:");
         cbSurgeCollective = new JComboBox<>();
         cbSurgeCollective.setPreferredSize(leftDim);
         c.gridx = 0; c.gridy = row; panel.add(lblSurgeCollective, c);
         c.gridx = 1; panel.add(cbSurgeCollective, c);
         lblSurgeCollective.setVisible(false);
         cbSurgeCollective.setVisible(false);
         row++;
 
         loadMetatypes();
         loadSurgeCollectives();
-        loadArchetypes();
-        cbRole.setSelectedIndex(-1);
-        cbMetatype.setSelectedIndex(-1);
-        cbGender.setSelectedIndex(-1);
+        loadArchetypes();
+        cbRole.setSelectedIndex(-1);
+        cbMetatype.setSelectedIndex(-1);
+        cbGender.setSelectedIndex(-1);
+        cbStatus.setSelectedIndex(-1);
 
         tfHeight.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
             public void insertUpdate(javax.swing.event.DocumentEvent e) { updateHeightFeet(); }
             public void removeUpdate(javax.swing.event.DocumentEvent e) { updateHeightFeet(); }
             public void changedUpdate(javax.swing.event.DocumentEvent e) { updateHeightFeet(); }
         });
         tfWeight.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
             public void insertUpdate(javax.swing.event.DocumentEvent e) { updateWeightLbs(); }
             public void removeUpdate(javax.swing.event.DocumentEvent e) { updateWeightLbs(); }
             public void changedUpdate(javax.swing.event.DocumentEvent e) { updateWeightLbs(); }
         });
 
-        chkSurge.addActionListener(e -> {
-            boolean sel = chkSurge.isSelected();
-            lblSurgeCollective.setVisible(sel);
-            cbSurgeCollective.setVisible(sel);
-            cbSurgeCollective.setSelectedItem("No Collective");
-            if (!sel) {
-                removeMetageneticQualities();
-                removeKarma("Base", "SURGE");
-            }
-        });
-
-        cbSurgeCollective.addActionListener(e -> {
-            if (chkSurge.isSelected()) {
-                String owner = (String) cbSurgeCollective.getSelectedItem();
-                loadRacialTraitsForCollective(owner);
-                if ("No Collective".equals(owner)) {
-                    removeKarma("Base", "SURGE");
-                } else {
-                    int cost = surgeKarmaMap.getOrDefault(owner, 0);
-                    addOrUpdateKarma("Base", "SURGE", cost);
-                }
-            }
-        });
+        chkSurge.addActionListener(e -> {
+            boolean sel = chkSurge.isSelected();
+            lblSurgeCollective.setVisible(sel);
+            cbSurgeCollective.setVisible(sel);
+            cbSurgeCollective.setSelectedItem("No Collective");
+            if (!sel) {
+                removeMetageneticQualities();
+                if (lastSurgeCollective != null) {
+                    removeKarma("SURGE", lastSurgeCollective);
+                    lastSurgeCollective = null;
+                }
+            }
+        });
+
+        cbSurgeCollective.addActionListener(e -> {
+            if (chkSurge.isSelected()) {
+                String owner = (String) cbSurgeCollective.getSelectedItem();
+                loadRacialTraitsForCollective(owner);
+                if (lastSurgeCollective != null) {
+                    removeKarma("SURGE", lastSurgeCollective);
+                }
+                if (!"No Collective".equals(owner)) {
+                    int cost = surgeKarmaMap.getOrDefault(owner, 0);
+                    addOrUpdateKarma("SURGE", owner, cost);
+                    lastSurgeCollective = owner;
+                } else {
+                    lastSurgeCollective = null;
+                }
+            }
+        });
 
         cbRole.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 String sel = (String) cbRole.getSelectedItem();
                 btnRoleInfo.setVisible(sel != null && !sel.isEmpty());
             }
         });
         btnRoleInfo.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 String sel = (String) cbRole.getSelectedItem();
                 if (sel != null && archetypeMap.containsKey(sel)) {
                     String[] vals = archetypeMap.get(sel);
                     JOptionPane.showMessageDialog(frame,
                             "Archetype: " + sel + "\nPrimary Focus: " + vals[2] + "\n" + vals[1],
                             "Archetype Info", JOptionPane.INFORMATION_MESSAGE);
                 }
             }
         });
 
         contentPanel.add(panel);
     }
 
     private void buildAttributesSection() {
         JPanel panel = new JPanel(new GridBagLayout());
         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Attributes", TitledBorder.LEFT, TitledBorder.TOP));
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index f5814b60be84a2580a87f11e653b24c551d3d996..5039c0edd398cbeef70af5d88107c10f96905457 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -493,51 +512,51 @@ private void buildConditionMonitorSection() {
 
         panel.add(new JLabel("Enter skills:"), BorderLayout.NORTH);
         panel.add(sp, BorderLayout.CENTER);
         panel.add(btnPanel, BorderLayout.SOUTH);
         updateSkillCount();
         return panel;
     }
 
     private JPanel buildQualitiesSection() {
         JPanel panel = new JPanel(new BorderLayout());
         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Qualities", TitledBorder.LEFT, TitledBorder.TOP));
 
         qualitiesTableModel = new DefaultTableModel(new Object[]{"Category", "Quality", "Type", "Karma"}, 0) {
             public boolean isCellEditable(int r, int c) {
                 if (c >= 2) return false;
                 if (lockedQualityRows.contains(r)) return false;
                 Object cat = getValueAt(r, 0);
                 if ("Metatype".equals(cat) || "Metagenetic".equals(cat)) return false;
                 return true;
             }
         };
         tableQualities = new JTable(qualitiesTableModel);
         tableQualities.setAutoCreateRowSorter(true);
         tableQualities.setPreferredScrollableViewportSize(new Dimension(500, 150));
 
-        String[] qualityCats = {"Magic","Matrix","Mental","Physical","Social","Vehicle"};
+        String[] qualityCats = {"Magic","Matrix","Mental","Physical","Social","Vehicle","Metagenic"};
         TableColumn catCol = tableQualities.getColumnModel().getColumn(0);
         catCol.setCellEditor(new DefaultCellEditor(new JComboBox<>(qualityCats)));
 
         TableColumn qualCol = tableQualities.getColumnModel().getColumn(1);
         JComboBox<String> qualityBox = new JComboBox<>();
         qualCol.setCellEditor(new DefaultCellEditor(qualityBox) {
             public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
                 qualityBox.removeAllItems();
                 Object catObj = table.getValueAt(row, 0);
                 String cat = catObj == null ? "" : catObj.toString();
                 for (QualityEntry qe : qualityEntries) {
                     if (cat.equalsIgnoreCase(qe.category)) {
                         qualityBox.addItem(qe.name);
                     }
                 }
                 return super.getTableCellEditorComponent(table, value, isSelected, row, column);
             }
         });
 
         JScrollPane sp = new JScrollPane(tableQualities);
 
         loadQualities();
 
         qualitiesTableModel.addTableModelListener(e -> {
             if (e.getType() != javax.swing.event.TableModelEvent.UPDATE) return;
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index f5814b60be84a2580a87f11e653b24c551d3d996..5039c0edd398cbeef70af5d88107c10f96905457 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -576,61 +595,63 @@ private void buildConditionMonitorSection() {
                 int newRow = qualitiesTableModel.getRowCount() - 1;
                 tableQualities.setRowSelectionInterval(newRow, newRow);
                 updateQualityCount();
                 addSaveLayout.show(addSavePanel, "SAVE");
             }
         });
         JButton btnRemoveQuality = new JButton("Remove Quality");
         btnRemoveQuality.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 int row = tableQualities.getSelectedRow();
                 if (row != -1) {
                     int modelRow = tableQualities.convertRowIndexToModel(row);
                     Object cat = qualitiesTableModel.getValueAt(modelRow, 0);
                     if ("Metatype".equals(cat)) {
                         JOptionPane.showMessageDialog(frame,
                                 "ERROR: Qualities inherited from a Metatype cannot be removed.",
                                 "Error", JOptionPane.ERROR_MESSAGE);
                         return;
                     }
                     if ("Metagenetic".equals(cat)) {
                         JOptionPane.showMessageDialog(frame,
                                 "ERROR: Qualities inherited by SURGE Collective cannot be removed.",
                                 "Error", JOptionPane.ERROR_MESSAGE);
                         return;
                     }
-                    qualitiesTableModel.removeRow(modelRow);
-                    java.util.Set<Integer> newSet = new java.util.HashSet<>();
-                    for (int r : lockedQualityRows) {
-                        if (r == modelRow) continue;
-                        newSet.add(r > modelRow ? r - 1 : r);
-                    }
-                    lockedQualityRows = newSet;
-                    updateQualityCount();
-                }
-            }
-        });
+                    String name = (String) qualitiesTableModel.getValueAt(modelRow, 1);
+                    qualitiesTableModel.removeRow(modelRow);
+                    removeKarma("Quality", name == null ? "" : name);
+                    java.util.Set<Integer> newSet = new java.util.HashSet<>();
+                    for (int r : lockedQualityRows) {
+                        if (r == modelRow) continue;
+                        newSet.add(r > modelRow ? r - 1 : r);
+                    }
+                    lockedQualityRows = newSet;
+                    updateQualityCount();
+                }
+            }
+        });
         btnSaveQuality.addActionListener(e -> {
             int row = tableQualities.getSelectedRow();
             if (row != -1) {
                 int modelRow = tableQualities.convertRowIndexToModel(row);
                 lockedQualityRows.add(modelRow);
                 String name = (String) qualitiesTableModel.getValueAt(modelRow, 1);
                 String karmaStr = (String) qualitiesTableModel.getValueAt(modelRow, 3);
                 int cost = 0;
                 try { cost = Integer.parseInt(karmaStr); } catch(Exception ex) {}
                 addOrUpdateKarma("Quality", name == null ? "" : name, cost);
                 tableQualities.clearSelection();
             }
             addSaveLayout.show(addSavePanel, "ADD");
         });
         lblQualityCount = new JLabel("0 qualities");
         JPanel buttonSub = new JPanel(new FlowLayout(FlowLayout.LEFT));
         buttonSub.add(addSavePanel);
         buttonSub.add(btnRemoveQuality);
         JPanel btnPanel = new JPanel(new BorderLayout());
         btnPanel.add(buttonSub, BorderLayout.WEST);
         btnPanel.add(lblQualityCount, BorderLayout.EAST);
 
         panel.add(new JLabel("Enter qualities:"), BorderLayout.NORTH);
         panel.add(sp, BorderLayout.CENTER);
         panel.add(btnPanel, BorderLayout.SOUTH);
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index f5814b60be84a2580a87f11e653b24c551d3d996..5039c0edd398cbeef70af5d88107c10f96905457 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -805,64 +826,68 @@ private void buildConditionMonitorSection() {
                 try { karma = Integer.parseInt(m[1].trim()); } catch(Exception ex) {}
                 double h = Double.parseDouble(m[4]);
                 double w = Double.parseDouble(m[5]);
                 MetaItem item = new MetaItem(name, false);
                 cbMetatype.addItem(item);
                 metatypeMap.put(name, new double[]{h, w});
                 metatypeKarmaMap.put(name, karma);
                 java.util.List<String[]> varList = variants.get(name);
                 if (varList != null) {
                     for (String[] v : varList) {
                         String varName = v[0].trim();
                         int vkarma = 0;
                         try { vkarma = Integer.parseInt(v[1].trim()); } catch(Exception ex) {}
                         double vh = Double.parseDouble(v[4]);
                         double vw = Double.parseDouble(v[5]);
                         cbMetatype.addItem(new MetaItem(varName, true));
                         metatypeMap.put(varName, new double[]{vh, vw});
                         metatypeKarmaMap.put(varName, vkarma);
                     }
                 }
             }
         } catch (Exception ignored) {}
 
         cbMetatype.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(java.awt.event.ActionEvent e) {
-                MetaItem item = (MetaItem) cbMetatype.getSelectedItem();
-                if (item != null && metatypeMap.containsKey(item.name)) {
-                    double[] vals = metatypeMap.get(item.name);
-                    tfHeight.setText(String.format("%.0f", vals[0]));
-                    tfWeight.setText(String.format("%.0f", vals[1]));
-                    updateHeightFeet();
-                    updateWeightLbs();
-                    loadRacialTraitsForMetatype(item.name);
-                    int cost = metatypeKarmaMap.getOrDefault(item.name, 0);
-                    addOrUpdateKarma("Base", "Metatype", cost);
-                }
-            }
-        });
-    }
+                MetaItem item = (MetaItem) cbMetatype.getSelectedItem();
+                if (item != null && metatypeMap.containsKey(item.name)) {
+                    double[] vals = metatypeMap.get(item.name);
+                    tfHeight.setText(String.format("%.0f", vals[0]));
+                    tfWeight.setText(String.format("%.0f", vals[1]));
+                    updateHeightFeet();
+                    updateWeightLbs();
+                    loadRacialTraitsForMetatype(item.name);
+                    if (lastMetatype != null) {
+                        removeKarma("Metatype", lastMetatype);
+                    }
+                    int cost = metatypeKarmaMap.getOrDefault(item.name, 0);
+                    addOrUpdateKarma("Metatype", item.name, cost);
+                    lastMetatype = item.name;
+                }
+            }
+        });
+    }
 
     private void loadSurgeCollectives() {
         cbSurgeCollective.removeAllItems();
         cbSurgeCollective.addItem("No Collective");
         surgeKarmaMap.clear();
         java.io.File file = new java.io.File("Shadowrun_Metatype.csv");
         if (!file.exists()) return;
         try (java.io.BufferedReader br = new java.io.BufferedReader(new java.io.FileReader(file))) {
             String line = br.readLine();
             while ((line = br.readLine()) != null) {
                 String[] parts = line.split(",", -1);
                 if (parts.length >= 3) {
                     String name = parts[0].trim();
                     int karma = 0;
                     try { karma = Integer.parseInt(parts[1].trim()); } catch(Exception ex) {}
                     String type = parts[2].trim();
                     if ("Changeling".equalsIgnoreCase(type)) {
                         cbSurgeCollective.addItem(name);
                         surgeKarmaMap.put(name, karma);
                     }
                 }
             }
         } catch (Exception ignored) {}
     }
 
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index f5814b60be84a2580a87f11e653b24c551d3d996..5039c0edd398cbeef70af5d88107c10f96905457 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -1366,54 +1391,56 @@ private void buildSpellsSection() {
         contentPanel.add(panel);
     }
 
 */
 /*
  * Future feature: Adept Powers or Other Abilities section
 private void buildAdeptPowersSection() {
         JPanel panel = new JPanel(new BorderLayout());
         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Adept Powers / Other Abilities", TitledBorder.LEFT, TitledBorder.TOP));
         taAdeptPowers = new JTextArea(3, 60);
         taAdeptPowers.setLineWrap(true);
         taAdeptPowers.setBorder(BorderFactory.createLineBorder(Color.GRAY));
         JScrollPane sp = new JScrollPane(taAdeptPowers);
         panel.add(new JLabel("Enter adept powers or other abilities (one per line, format: Name, Level, Notes):"), BorderLayout.NORTH);
         panel.add(sp, BorderLayout.CENTER);
         contentPanel.add(panel);
     }
 */
 
     private void generateReport() {
         StringBuilder sb = new StringBuilder();
         sb.append("=== Shadowrun 6e Character Report ===\n\n");
         sb.append("-- Personal Data --\n");
         sb.append(String.format("Name: %s\n", tfName.getText()));
         sb.append(String.format("Player: %s\n", tfPlayer.getText()));
-        sb.append(String.format("Role: %s   Metatype: %s   Gender: %s   Age: %s   Height (cm): %s   Weight (kg): %s\n",
-                cbRole.getSelectedItem(), cbMetatype.getSelectedItem(),
-                cbGender.getSelectedItem(), tfAge.getText(),
-                tfHeight.getText(), tfWeight.getText()));
+        sb.append(String.format("Role: %s   Metatype: %s   Gender: %s   Age: %s   Height (cm): %s   Weight (kg): %s\n",
+                cbRole.getSelectedItem(), cbMetatype.getSelectedItem(),
+                cbGender.getSelectedItem(), tfAge.getText(),
+                tfHeight.getText(), tfWeight.getText()));
+        sb.append(String.format("Nationality: %s   Status: %s\n",
+                tfNationality.getText(), cbStatus.getSelectedItem()));
 
         sb.append("\n-- Attributes --\n");
         sb.append(String.format("Body: %s   Agility: %s   Reaction: %s   Strength: %s   Willpower: %s\n",
                 spBody.getValue(), spAgility.getValue(), spReaction.getValue(), spStrength.getValue(), spWillpower.getValue()));
         sb.append(String.format("Logic: %s   Intuition: %s   Charisma: %s   Edge: %s   Essence: %s\n",
                 spLogic.getValue(), spIntuition.getValue(), spCharisma.getValue(), spEdge.getValue(), spEssence.getValue()));
         sb.append(String.format("Magic: %s   Resonance: %s\n",
                 spMagic.getValue(), spResonance.getValue()));
         // Initiative and other derived stats will be added later
 
         // Condition Monitor will be added in a future version
 
         sb.append("\n-- Skills --\n");
         StringBuilder skillsBuilder = new StringBuilder();
         for (int i = 0; i < skillsTableModel.getRowCount(); i++) {
             String type = (String) skillsTableModel.getValueAt(i, 0);
             String skill = (String) skillsTableModel.getValueAt(i, 1);
             String rank = (String) skillsTableModel.getValueAt(i, 2);
             String attribute = (String) skillsTableModel.getValueAt(i, 3);
             String category = (String) skillsTableModel.getValueAt(i, 4);
             if (skill != null && !skill.trim().isEmpty()) {
                 skillsBuilder.append(String.format("%s, %s, %s, %s, %s\n",
                         type == null ? "" : type,
                         skill,
                         rank == null ? "" : rank,
 
EOF
)