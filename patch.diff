 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index 70b12a5a4068d838c5993bf4aaf425d58223c30d..a54ddbfc786c5d7e6a2f229bd62570dd9d610016 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -840,105 +840,127 @@ private void buildConditionMonitorSection() {
         }
         updateLoggedKarma();
     }
 
     private void updateLoggedKarma() {
         int total = 0;
         for (int i = 0; i < karmaLogModel.getRowCount(); i++) {
             Object v = karmaLogModel.getValueAt(i, 2);
             try {
                 total += Integer.parseInt(v.toString());
             } catch (Exception ignored) {}
         }
         if (lblLoggedKarma != null) {
             lblLoggedKarma.setText("Logged Karma: " + total);
         }
     }
 
     private JPanel buildWizardPanel() {
         wizardMetaCombo = new JComboBox<>();
         wizardSurgeCheck = new JCheckBox("SURGE");
         wizardSurgeCombo = new JComboBox<>();
         wizardStatusCombo = new JComboBox<>();
         wizardNationalityField = new JTextField(10);
         wizardLanguageField = new JTextField(10);
 
-        wizardSurgeCheck.addActionListener(e -> wizardSurgeCombo.setVisible(wizardSurgeCheck.isSelected()));
-
-        JPanel panel = new JPanel(new GridBagLayout());
-        panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Life Path Wizard", TitledBorder.LEFT, TitledBorder.TOP));
-        GridBagConstraints c = new GridBagConstraints();
-        c.insets = new Insets(4,4,4,4);
-        c.anchor = GridBagConstraints.WEST;
-        int row = 0;
-
-        c.gridx=0; c.gridy=row; panel.add(new JLabel("Metatype:"), c);
-        c.gridx=1; panel.add(wizardMetaCombo, c); row++;
-
-        c.gridx=0; c.gridy=row; panel.add(wizardSurgeCheck, c); row++;
-
-        c.gridx=0; c.gridy=row; panel.add(new JLabel("SURGE Collective:"), c);
-        c.gridx=1; panel.add(wizardSurgeCombo, c); row++;
-
-        c.gridx=0; c.gridy=row; panel.add(new JLabel("Status:"), c);
-        c.gridx=1; panel.add(wizardStatusCombo, c); row++;
-
-        c.gridx=0; c.gridy=row; panel.add(new JLabel("Nationality:"), c);
-        c.gridx=1; panel.add(wizardNationalityField, c); row++;
-
-        c.gridx=0; c.gridy=row; panel.add(new JLabel("Native Language:"), c);
-        c.gridx=1; panel.add(wizardLanguageField, c); row++;
-
-        JButton btnApply = new JButton("Apply Changes");
-        JButton btnCancel = new JButton("Cancel Wizard");
-        btnApply.addActionListener(e -> applyWizardSelections());
-        btnCancel.addActionListener(e -> { wizardPanel.setVisible(false); frame.revalidate(); });
-        JPanel btnPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
-        btnPanel.add(btnApply);
-        btnPanel.add(btnCancel);
-        c.gridx=0; c.gridy=row; c.gridwidth=2; panel.add(btnPanel, c);
-
-        return panel;
+        wizardSurgeCheck.addActionListener(e -> {
+            boolean sel = wizardSurgeCheck.isSelected();
+            wizardSurgeCombo.setVisible(sel);
+            if (!sel) {
+                wizardSurgeCombo.setSelectedItem("No Collective");
+            }
+        });
+
+        JPanel panel = new JPanel();
+        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
+        panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Life Path Wizard", TitledBorder.LEFT, TitledBorder.TOP));
+
+        JPanel stage1 = new JPanel(new GridBagLayout());
+        stage1.setBorder(BorderFactory.createTitledBorder("Stage 1: Born This Way"));
+        GridBagConstraints c = new GridBagConstraints();
+        c.insets = new Insets(4,4,4,4);
+        c.anchor = GridBagConstraints.WEST;
+        int row = 0;
+
+        c.gridx=0; c.gridy=row; stage1.add(new JLabel("Metatype:"), c);
+        c.gridx=1; stage1.add(wizardMetaCombo, c); row++;
+
+        c.gridx=0; c.gridy=row; stage1.add(wizardSurgeCheck, c); row++;
+
+        c.gridx=0; c.gridy=row; stage1.add(new JLabel("SURGE Collective:"), c);
+        c.gridx=1; stage1.add(wizardSurgeCombo, c); row++;
+
+        c.gridx=0; c.gridy=row; stage1.add(new JLabel("Status:"), c);
+        c.gridx=1; stage1.add(wizardStatusCombo, c); row++;
+
+        c.gridx=0; c.gridy=row; stage1.add(new JLabel("Nationality:"), c);
+        c.gridx=1; stage1.add(wizardNationalityField, c); row++;
+
+        c.gridx=0; c.gridy=row; stage1.add(new JLabel("Native Language:"), c);
+        c.gridx=1; stage1.add(wizardLanguageField, c); row++;
+
+        JPanel stage2 = new JPanel();
+        stage2.setBorder(BorderFactory.createTitledBorder("Stage 2: Growing Up"));
+
+        JPanel stage3 = new JPanel();
+        stage3.setBorder(BorderFactory.createTitledBorder("Stage 3: Coming of Age"));
+
+        JButton btnApply = new JButton("Apply Changes");
+        JButton btnCancel = new JButton("Cancel Wizard");
+        btnApply.addActionListener(e -> applyWizardSelections());
+        btnCancel.addActionListener(e -> { wizardPanel.setVisible(false); frame.revalidate(); });
+        JPanel btnPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
+        btnPanel.add(btnApply);
+        btnPanel.add(btnCancel);
+
+        panel.add(stage1);
+        panel.add(stage2);
+        panel.add(stage3);
+        panel.add(btnPanel);
+
+        return panel;
     }
 
     private void applyWizardSelections() {
         String meta = (String) wizardMetaCombo.getSelectedItem();
         if (meta != null) {
             for (int i = 0; i < cbMetatype.getItemCount(); i++) {
                 MetaItem mi = cbMetatype.getItemAt(i);
                 if (mi.name.equals(meta)) { cbMetatype.setSelectedIndex(i); break; }
             }
             setBaseAttributesForMetatype(meta);
         }
 
-        boolean surge = wizardSurgeCheck.isSelected();
-        chkSurge.setSelected(surge);
-        lblSurgeCollective.setVisible(surge);
-        cbSurgeCollective.setVisible(surge);
-        if (surge) {
-            cbSurgeCollective.setSelectedItem(wizardSurgeCombo.getSelectedItem());
-        }
+        boolean surge = wizardSurgeCheck.isSelected();
+        chkSurge.setSelected(surge);
+        lblSurgeCollective.setVisible(surge);
+        cbSurgeCollective.setVisible(surge);
+        if (surge) {
+            cbSurgeCollective.setSelectedItem(wizardSurgeCombo.getSelectedItem());
+        } else {
+            cbSurgeCollective.setSelectedItem("No Collective");
+        }
 
         String statusSel = (String) wizardStatusCombo.getSelectedItem();
         if (statusSel != null) {
             cbStatus.setSelectedItem(statusSel);
             switch (statusSel) {
                 case "Technomancer":
                     spResonance.setValue(1);
                     break;
                 case "Aspected Magician":
                     spMagic.setValue(2);
                     break;
                 case "Full Magician":
                 case "Mystic Adept":
                 case "Adept":
                     spMagic.setValue(1);
                     break;
                 case "Mundane":
                     spEdge.setValue(((Number) spEdge.getValue()).intValue() + 1);
                     break;
             }
         }
 
         tfNationality.setText(wizardNationalityField.getText());
         String lang = wizardLanguageField.getText().trim();
         if (!lang.isEmpty()) {
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index 70b12a5a4068d838c5993bf4aaf425d58223c30d..a54ddbfc786c5d7e6a2f229bd62570dd9d610016 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -1699,53 +1721,58 @@ private void buildAdeptPowersSection() {
         JScrollPane sp = new JScrollPane(taAdeptPowers);
         panel.add(new JLabel("Enter adept powers or other abilities (one per line, format: Name, Level, Notes):"), BorderLayout.NORTH);
         panel.add(sp, BorderLayout.CENTER);
         contentPanel.add(panel);
     }
 */
 
     private void runLifePathWizard() {
         wizardMetaCombo.removeAllItems();
         for (int i = 0; i < cbMetatype.getItemCount(); i++) {
             wizardMetaCombo.addItem(cbMetatype.getItemAt(i).name);
         }
 
         wizardSurgeCombo.removeAllItems();
         for (int i = 0; i < cbSurgeCollective.getItemCount(); i++) {
             wizardSurgeCombo.addItem(cbSurgeCollective.getItemAt(i));
         }
 
         wizardStatusCombo.removeAllItems();
         for (int i = 0; i < cbStatus.getItemCount(); i++) {
             wizardStatusCombo.addItem(cbStatus.getItemAt(i));
         }
 
         MetaItem selMeta = (MetaItem) cbMetatype.getSelectedItem();
         if (selMeta != null) wizardMetaCombo.setSelectedItem(selMeta.name); else wizardMetaCombo.setSelectedIndex(-1);
-        wizardSurgeCheck.setSelected(chkSurge.isSelected());
-        wizardSurgeCombo.setVisible(chkSurge.isSelected());
-        wizardSurgeCombo.setSelectedItem(cbSurgeCollective.getSelectedItem());
+        wizardSurgeCheck.setSelected(chkSurge.isSelected());
+        boolean sel = chkSurge.isSelected();
+        wizardSurgeCombo.setVisible(sel);
+        if (sel) {
+            wizardSurgeCombo.setSelectedItem(cbSurgeCollective.getSelectedItem());
+        } else {
+            wizardSurgeCombo.setSelectedItem("No Collective");
+        }
         wizardStatusCombo.setSelectedItem(cbStatus.getSelectedItem());
         wizardNationalityField.setText(tfNationality.getText());
         wizardLanguageField.setText("");
 
         wizardPanel.setVisible(true);
         frame.revalidate();
     }
 
     private void generateReport() {
         StringBuilder sb = new StringBuilder();
         sb.append("=== Shadowrun 6e Character Report ===\n\n");
         sb.append("-- Personal Data --\n");
         sb.append(String.format("Name: %s\n", tfName.getText()));
         sb.append(String.format("Player: %s\n", tfPlayer.getText()));
         sb.append(String.format("Role: %s   Metatype: %s   Gender: %s   Age: %s   Height (cm): %s   Weight (kg): %s\n",
                 cbRole.getSelectedItem(), cbMetatype.getSelectedItem(),
                 cbGender.getSelectedItem(), tfAge.getText(),
                 tfHeight.getText(), tfWeight.getText()));
         sb.append(String.format("Nationality: %s   Status: %s\n",
                 tfNationality.getText(), cbStatus.getSelectedItem()));
 
         sb.append("\n-- Attributes --\n");
         sb.append(String.format("Body: %s   Agility: %s   Reaction: %s   Strength: %s   Willpower: %s\n",
                 spBody.getValue(), spAgility.getValue(), spReaction.getValue(), spStrength.getValue(), spWillpower.getValue()));
         sb.append(String.format("Logic: %s   Intuition: %s   Charisma: %s   Edge: %s   Essence: %s\n",
 
EOF
)