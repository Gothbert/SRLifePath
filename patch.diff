 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index 8293b9a27ba3d57fab2c8dfb762a70c9ab2617cd..90f065df9d7f0d7b50b1ee047ab065e6745f1e99 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -42,52 +42,52 @@ public class ShadowrunCharacterBuilderGUI {
                      spEdge, spEssence, spMagic, spResonance;
     private JTextField tfComposure, tfJudgeIntentions, tfMemory, tfLiftCarry;
     // TODO later: initiative and other derived stats
     // private JTextField tfInitiative, tfMatrixInitiative, tfAstralInitiative,
     //                    tfJudgeIntentions, tfMemory, tfLiftCarry, tfMovement,
     //                    tfUnarmedAR, tfDefenseRating;
     
     // CONDITION MONITOR fields (future feature)
     // private JTextField tfPhysicalBoxes, tfStunBoxes;
     
     // SKILLS table and QUALITIES/CONTACTS tables
     private JTable tableSkills;
     private DefaultTableModel skillsTableModel;
     private JTable tableQualities;
     private DefaultTableModel qualitiesTableModel;
     private JTable tableContacts;
     private DefaultTableModel contactsTableModel;
     private JLabel lblSkillCount;
     private JLabel lblQualityCount;
     private java.util.Map<String, double[]> metatypeMap = new java.util.LinkedHashMap<>();
     private java.util.Map<String, Integer> metatypeKarmaMap = new java.util.LinkedHashMap<>();
     private java.util.Map<String, Integer> surgeKarmaMap = new java.util.LinkedHashMap<>();
     private java.util.Map<String, String[]> archetypeMap = new java.util.LinkedHashMap<>();
     private java.util.Map<String, String[]> skillMap = new java.util.LinkedHashMap<>();
     private java.util.Map<String, String[]> specializationMap = new java.util.LinkedHashMap<>();
-    private java.util.List<QualityEntry> qualityEntries = new java.util.ArrayList<>();
-    private java.util.Set<Integer> lockedQualityRows = new java.util.HashSet<>();
+    private java.util.List<QualityEntry> qualityEntries = new java.util.ArrayList<>();
+    private int editingQualityRow = -1;
 
     private String lastSurgeCollective = null;
     private String lastMetatype = null;
 
     private JTable tableKarmaLog;
     private DefaultTableModel karmaLogModel;
     private JLabel lblLoggedKarma;
 
     private static final String[] RANK_OPTIONS = {
             "1 - Novice",
             "2 - Advanced Beginner",
             "3 - Journeyman",
             "4 - Professional",
             "5 - Advanced Professional",
             "6 - Local Legend",
             "7 - Elite",
             "8 - Professional Elite",
             "9 - National Elite",
             "10 - Multinational Elite",
             "11 - Global Elite",
             "12 - GOAT"
     };
     
     // WEAPONS, ARMOR: future feature
     // private JTextArea taRangedWeapons, taMeleeWeapons, taArmor;
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index 8293b9a27ba3d57fab2c8dfb762a70c9ab2617cd..90f065df9d7f0d7b50b1ee047ab065e6745f1e99 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -499,59 +499,55 @@ private void buildConditionMonitorSection() {
                 if (row != -1) {
                     skillsTableModel.removeRow(row);
                     updateSkillCount();
                 }
             }
         });
         lblSkillCount = new JLabel("0 skills");
         JPanel buttonSub = new JPanel(new FlowLayout(FlowLayout.LEFT));
         buttonSub.add(btnAddSkill);
         buttonSub.add(btnRemoveSkill);
         JPanel btnPanel = new JPanel(new BorderLayout());
         btnPanel.add(buttonSub, BorderLayout.WEST);
         btnPanel.add(lblSkillCount, BorderLayout.EAST);
 
         panel.add(new JLabel("Enter skills:"), BorderLayout.NORTH);
         panel.add(sp, BorderLayout.CENTER);
         panel.add(btnPanel, BorderLayout.SOUTH);
         updateSkillCount();
         return panel;
     }
 
     private JPanel buildQualitiesSection() {
         JPanel panel = new JPanel(new BorderLayout());
         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Qualities", TitledBorder.LEFT, TitledBorder.TOP));
 
-        qualitiesTableModel = new DefaultTableModel(new Object[]{"Category", "Quality", "Type", "Karma"}, 0) {
-            public boolean isCellEditable(int r, int c) {
-                if (c >= 2) return false;
-                if (lockedQualityRows.contains(r)) return false;
-                Object cat = getValueAt(r, 0);
-                if ("Metatype".equals(cat) || "Metagenic".equals(cat)) return false;
-                return true;
-            }
-        };
+        qualitiesTableModel = new DefaultTableModel(new Object[]{"Category", "Quality", "Type", "Karma"}, 0) {
+            public boolean isCellEditable(int r, int c) {
+                return r == editingQualityRow && c < 2;
+            }
+        };
         tableQualities = new JTable(qualitiesTableModel);
         tableQualities.setAutoCreateRowSorter(true);
         tableQualities.setPreferredScrollableViewportSize(new Dimension(500, 150));
 
         String[] qualityCats = {"Magic","Matrix","Mental","Metagenic","Physical","Social","Vehicle"};
         TableColumn catCol = tableQualities.getColumnModel().getColumn(0);
         catCol.setCellEditor(new DefaultCellEditor(new JComboBox<>(qualityCats)));
 
         TableColumn qualCol = tableQualities.getColumnModel().getColumn(1);
         JComboBox<String> qualityBox = new JComboBox<>();
         qualCol.setCellEditor(new DefaultCellEditor(qualityBox) {
             public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
                 qualityBox.removeAllItems();
                 Object catObj = table.getValueAt(row, 0);
                 String cat = catObj == null ? "" : catObj.toString();
                 for (QualityEntry qe : qualityEntries) {
                     if (cat.equalsIgnoreCase(qe.category)) {
                         qualityBox.addItem(qe.name);
                     }
                 }
                 return super.getTableCellEditorComponent(table, value, isSelected, row, column);
             }
         });
 
         JScrollPane sp = new JScrollPane(tableQualities);
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index 8293b9a27ba3d57fab2c8dfb762a70c9ab2617cd..90f065df9d7f0d7b50b1ee047ab065e6745f1e99 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -567,105 +563,104 @@ private void buildConditionMonitorSection() {
                 qualitiesTableModel.setValueAt("", row, 1);
                 qualitiesTableModel.setValueAt("", row, 2);
                 qualitiesTableModel.setValueAt("", row, 3);
             } else if (col == 1) {
                 Object qVal = qualitiesTableModel.getValueAt(row, 1);
                 if (qVal != null) {
                     for (QualityEntry qe : qualityEntries) {
                         if (qe.name.equals(qVal.toString())) {
                             qualitiesTableModel.setValueAt(qe.type, row, 2);
                             qualitiesTableModel.setValueAt(String.valueOf(qe.karma), row, 3);
                             break;
                         }
                     }
                 }
             }
         });
 
         JButton btnAddQuality = new JButton("Add Quality");
         JButton btnSaveQuality = new JButton("Save Quality");
         CardLayout addSaveLayout = new CardLayout();
         JPanel addSavePanel = new JPanel(addSaveLayout);
         addSavePanel.add(btnAddQuality, "ADD");
         addSavePanel.add(btnSaveQuality, "SAVE");
         addSaveLayout.show(addSavePanel, "ADD");
 
-        btnAddQuality.addActionListener(new ActionListener() {
-            public void actionPerformed(ActionEvent e) {
-                qualitiesTableModel.addRow(new Object[]{"", "", "", ""});
-                int newRow = qualitiesTableModel.getRowCount() - 1;
-                tableQualities.setRowSelectionInterval(newRow, newRow);
-                updateQualityCount();
-                addSaveLayout.show(addSavePanel, "SAVE");
-            }
-        });
+        btnAddQuality.addActionListener(new ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                qualitiesTableModel.addRow(new Object[]{"", "", "", ""});
+                int newRow = qualitiesTableModel.getRowCount() - 1;
+                tableQualities.setRowSelectionInterval(newRow, newRow);
+                editingQualityRow = newRow;
+                updateQualityCount();
+                addSaveLayout.show(addSavePanel, "SAVE");
+            }
+        });
         JButton btnRemoveQuality = new JButton("Remove Quality");
         btnRemoveQuality.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 int row = tableQualities.getSelectedRow();
                 if (row != -1) {
                     int modelRow = tableQualities.convertRowIndexToModel(row);
                     Object cat = qualitiesTableModel.getValueAt(modelRow, 0);
                     if ("Metatype".equals(cat)) {
                         JOptionPane.showMessageDialog(frame,
                                 "ERROR: Qualities inherited from a Metatype cannot be removed.",
                                 "Error", JOptionPane.ERROR_MESSAGE);
                         return;
                     }
                     if ("Metagenic".equals(cat)) {
                         JOptionPane.showMessageDialog(frame,
                                 "ERROR: Qualities inherited by SURGE Collective cannot be removed.",
                                 "Error", JOptionPane.ERROR_MESSAGE);
                         return;
                     }
                     String name = (String) qualitiesTableModel.getValueAt(modelRow, 1);
-                    qualitiesTableModel.removeRow(modelRow);
-                    removeKarma("Quality", name == null ? "" : name);
-                    java.util.Set<Integer> newSet = new java.util.HashSet<>();
-                    for (int r : lockedQualityRows) {
-                        if (r == modelRow) continue;
-                        newSet.add(r > modelRow ? r - 1 : r);
-                    }
-                    lockedQualityRows = newSet;
-                    updateQualityCount();
+                    qualitiesTableModel.removeRow(modelRow);
+                    removeKarma("Quality", name == null ? "" : name);
+                    if (editingQualityRow == modelRow) {
+                        editingQualityRow = -1;
+                    } else if (editingQualityRow > modelRow) {
+                        editingQualityRow--;
+                    }
+                    updateQualityCount();
                 }
             }
         });
-        btnSaveQuality.addActionListener(e -> {
-            int row = tableQualities.getSelectedRow();
-            if (row != -1) {
-                int modelRow = tableQualities.convertRowIndexToModel(row);
-                lockedQualityRows.add(modelRow);
-                String name = (String) qualitiesTableModel.getValueAt(modelRow, 1);
-                String karmaStr = (String) qualitiesTableModel.getValueAt(modelRow, 3);
-                int cost = 0;
-                try { cost = Integer.parseInt(karmaStr); } catch(Exception ex) {}
-                addOrUpdateKarma("Quality", name == null ? "" : name, cost);
-                tableQualities.clearSelection();
-            }
-            addSaveLayout.show(addSavePanel, "ADD");
-        });
+        btnSaveQuality.addActionListener(e -> {
+            if (editingQualityRow != -1) {
+                int modelRow = editingQualityRow;
+                String name = (String) qualitiesTableModel.getValueAt(modelRow, 1);
+                String karmaStr = (String) qualitiesTableModel.getValueAt(modelRow, 3);
+                int cost = 0;
+                try { cost = Integer.parseInt(karmaStr); } catch (Exception ex) {}
+                addOrUpdateKarma("Quality", name == null ? "" : name, cost);
+                tableQualities.clearSelection();
+                editingQualityRow = -1;
+            }
+            addSaveLayout.show(addSavePanel, "ADD");
+        });
         lblQualityCount = new JLabel("0 qualities");
         JPanel buttonSub = new JPanel(new FlowLayout(FlowLayout.LEFT));
         buttonSub.add(addSavePanel);
         buttonSub.add(btnRemoveQuality);
         JPanel btnPanel = new JPanel(new BorderLayout());
         btnPanel.add(buttonSub, BorderLayout.WEST);
         btnPanel.add(lblQualityCount, BorderLayout.EAST);
 
         panel.add(new JLabel("Enter qualities:"), BorderLayout.NORTH);
         panel.add(sp, BorderLayout.CENTER);
         panel.add(btnPanel, BorderLayout.SOUTH);
         updateQualityCount();
         return panel;
     }
 
     private JPanel buildContactsSection() {
         JPanel panel = new JPanel(new BorderLayout());
         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Contacts", TitledBorder.LEFT, TitledBorder.TOP));
 
         contactsTableModel = new DefaultTableModel(new Object[]{"Name", "Loyalty", "Connection"}, 0);
         tableContacts = new JTable(contactsTableModel);
         tableContacts.setPreferredScrollableViewportSize(new Dimension(500, 150));
         JScrollPane sp = new JScrollPane(tableContacts);
 
         JButton btnAddContact = new JButton("Add Contact");
 
EOF
)