 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index da9eb0b329664a06858b039f03922c9d7d9be662..db94c7cfac805b3759e21f30f7ec07d329bf9892 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -31,51 +31,67 @@ public class ShadowrunCharacterBuilderGUI {
     private JTextArea taNotes;
     
     // ATTRIBUTES fields
     private JSpinner spBody, spAgility, spReaction, spStrength,
                      spWillpower, spLogic, spIntuition, spCharisma,
                      spEdge, spEssence, spMagic, spResonance;
     // TODO later: initiative and other derived stats
     // private JTextField tfInitiative, tfMatrixInitiative, tfAstralInitiative,
     //                    tfJudgeIntentions, tfMemory, tfLiftCarry, tfMovement,
     //                    tfUnarmedAR, tfDefenseRating;
     
     // CONDITION MONITOR fields (future feature)
     // private JTextField tfPhysicalBoxes, tfStunBoxes;
     
     // SKILLS table and QUALITIES/CONTACTS tables
     private JTable tableSkills;
     private DefaultTableModel skillsTableModel;
     private JTable tableQualities;
     private DefaultTableModel qualitiesTableModel;
     private JTable tableContacts;
     private DefaultTableModel contactsTableModel;
     private JLabel lblSkillCount;
     private JLabel lblQualityCount;
     private java.util.Map<String, double[]> metatypeMap = new java.util.LinkedHashMap<>();
     private java.util.Map<String, String[]> archetypeMap = new java.util.LinkedHashMap<>();
-    private java.util.Map<String, String[]> skillMap = new java.util.LinkedHashMap<>();
+    private java.util.Map<String, String[]> skillMap = new java.util.LinkedHashMap<>();
+    private java.util.Map<String, String[]> specializationMap = new java.util.LinkedHashMap<>();
+
+    private static final String[] RANK_OPTIONS = {
+            "1 - Novice",
+            "2 - Advanced Beginner",
+            "3 - Journeyman",
+            "4 - Professional",
+            "5 - Advanced Professional",
+            "6 - Local Legend",
+            "7 - Elite",
+            "8 - Professional Elite",
+            "9 - National Elite",
+            "10 - Multinational Elite",
+            "11 - Global Elite",
+            "12 - GOAT"
+    };
     
     // WEAPONS, ARMOR: future feature
     // private JTextArea taRangedWeapons, taMeleeWeapons, taArmor;
     
     // MATRIX STATS - future feature
     // private JTextField tfMatrixAttack, tfMatrixSleaze, tfMatrixDataProc, tfMatrixFirewall,
     //                    tfMatrixConditionBoxes;
     // private JTextArea taMatrixDevices;
     
     // AUGMENTATIONS - future feature
     // private JTextArea taAugmentations;
     
     // VEHICLE - future feature
     // private JTextField tfVehicleName, tfVehicleHandling, tfVehicleAcceleration,
     //                    tfVehicleSpeedInterval, tfVehicleTopSpeed, tfVehicleBody,
     //                    tfVehicleArmor, tfVehiclePilot, tfVehicleSensor, tfVehicleSeats;
     // private JTextArea taVehicleNotes;
     
     // GEAR - to be developed later
     // private JTextArea taGear;
     
     // SPELLS/ RITUALS/ COMPLEX FORMS - future feature
     // private JTextArea taSpellsRituals;
     
     // ADEPT POWERS - future feature
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index da9eb0b329664a06858b039f03922c9d7d9be662..db94c7cfac805b3759e21f30f7ec07d329bf9892 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -278,93 +294,94 @@ public class ShadowrunCharacterBuilderGUI {
     }
 
 /*
  * Future feature: Condition Monitor section
 private void buildConditionMonitorSection() {
         JPanel panel = new JPanel(new GridBagLayout());
         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Condition Monitor", TitledBorder.LEFT, TitledBorder.TOP));
         GridBagConstraints c = new GridBagConstraints();
         c.insets = new Insets(4, 4, 4, 4);
         c.anchor = GridBagConstraints.WEST;
 
         int row = 0;
         c.gridx = 0; c.gridy = row; panel.add(new JLabel("Physical Damage Track Boxes:"), c);
         tfPhysicalBoxes = new JTextField(5); c.gridx = 1; panel.add(tfPhysicalBoxes, c);
         c.gridx = 2; panel.add(new JLabel("Stun Damage Track Boxes:"), c);
         tfStunBoxes = new JTextField(5); c.gridx = 3; panel.add(tfStunBoxes, c);
 
         contentPanel.add(panel);
     }
 */
 
     private JPanel buildSkillsSection() {
         JPanel panel = new JPanel(new BorderLayout());
         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Skills", TitledBorder.LEFT, TitledBorder.TOP));
 
-        skillsTableModel = new DefaultTableModel(new Object[]{"Skill", "Rank", "Attribute", "Type"}, 0) {
-            public boolean isCellEditable(int row, int column) {
-                return column < 2;
-            }
-        };
-        tableSkills = new JTable(skillsTableModel);
-        tableSkills.setAutoCreateRowSorter(true);
-
-        loadSkills();
+        skillsTableModel = new DefaultTableModel(new Object[]{"Skill", "Rank", "Type", "Attribute", "Category"}, 0) {
+            public boolean isCellEditable(int row, int column) {
+                return column < 2;
+            }
+        };
+        tableSkills = new JTable(skillsTableModel);
+        tableSkills.setAutoCreateRowSorter(true);
+
+        loadSkills();
+        loadSpecializations();
 
         TableColumn skillCol = tableSkills.getColumnModel().getColumn(0);
         JComboBox<String> cbSkillNames = new JComboBox<>(skillMap.keySet().toArray(new String[0]));
         skillCol.setCellEditor(new DefaultCellEditor(cbSkillNames));
 
-        TableColumn rankCol = tableSkills.getColumnModel().getColumn(1);
-        String[] ranks = {"Novice","Advanced Beginner","Journeyman","Professional","Advanced Professional","Local Legend","Elite","Professional Elite","National Elite","Multinational Elite","Global Elite","GOAT"};
-        rankCol.setCellEditor(new DefaultCellEditor(new JComboBox<>(ranks)));
+        TableColumn rankCol = tableSkills.getColumnModel().getColumn(1);
+        rankCol.setCellEditor(new DefaultCellEditor(new JComboBox<>(RANK_OPTIONS)));
 
         skillsTableModel.addTableModelListener(e -> {
             if (e.getType() == javax.swing.event.TableModelEvent.UPDATE && e.getColumn() == 0) {
                 int r = e.getFirstRow();
                 Object val = skillsTableModel.getValueAt(r, 0);
-                if (val != null && skillMap.containsKey(val.toString())) {
-                    String[] info = skillMap.get(val.toString());
-                    skillsTableModel.setValueAt(info[0], r, 2);
-                    skillsTableModel.setValueAt(info[1], r, 3);
-                } else {
-                    skillsTableModel.setValueAt("", r, 2);
-                    skillsTableModel.setValueAt("", r, 3);
-                }
+                if (val != null && skillMap.containsKey(val.toString())) {
+                    String[] info = skillMap.get(val.toString());
+                    skillsTableModel.setValueAt("General", r, 2);
+                    skillsTableModel.setValueAt(info[0], r, 3);
+                    skillsTableModel.setValueAt(info[1], r, 4);
+                } else {
+                    skillsTableModel.setValueAt("", r, 2);
+                    skillsTableModel.setValueAt("", r, 3);
+                    skillsTableModel.setValueAt("", r, 4);
+                }
             }
         });
 
         JScrollPane sp = new JScrollPane(tableSkills);
         tableSkills.setPreferredScrollableViewportSize(new Dimension(500, 150));
 
-        JButton btnAddSkill = new JButton("Add Skill");
-        btnAddSkill.addActionListener(new ActionListener() {
-            public void actionPerformed(ActionEvent e) {
-                skillsTableModel.addRow(new Object[]{"", "", "", ""});
-                updateSkillCount();
-            }
-        });
+        JButton btnAddSkill = new JButton("Add Skill");
+        btnAddSkill.addActionListener(new ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                showAddSkillDialog();
+            }
+        });
         JButton btnRemoveSkill = new JButton("Remove Skill");
         btnRemoveSkill.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 int row = tableSkills.getSelectedRow();
                 if (row != -1) {
                     skillsTableModel.removeRow(row);
                     updateSkillCount();
                 }
             }
         });
         lblSkillCount = new JLabel("0 skills");
         JPanel buttonSub = new JPanel(new FlowLayout(FlowLayout.LEFT));
         buttonSub.add(btnAddSkill);
         buttonSub.add(btnRemoveSkill);
         JPanel btnPanel = new JPanel(new BorderLayout());
         btnPanel.add(buttonSub, BorderLayout.WEST);
         btnPanel.add(lblSkillCount, BorderLayout.EAST);
 
         panel.add(new JLabel("Enter skills:"), BorderLayout.NORTH);
         panel.add(sp, BorderLayout.CENTER);
         panel.add(btnPanel, BorderLayout.SOUTH);
         updateSkillCount();
         return panel;
     }
 
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index da9eb0b329664a06858b039f03922c9d7d9be662..db94c7cfac805b3759e21f30f7ec07d329bf9892 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -531,67 +548,241 @@ private void buildConditionMonitorSection() {
         });
     }
 
     private void updateHeightFeet() {
         try {
             double cm = Double.parseDouble(tfHeight.getText());
             int totalInches = (int) Math.round(cm / 2.54);
             int feet = totalInches / 12;
             int inches = totalInches % 12;
             tfHeightFt.setText(String.format("%d'%d\"", feet, inches));
         } catch (Exception ex) {
             tfHeightFt.setText("");
         }
     }
 
     private void updateWeightLbs() {
         try {
             double kg = Double.parseDouble(tfWeight.getText());
             int lbs = (int) Math.round(kg * 2.20462);
             tfWeightLbs.setText(String.valueOf(lbs));
         } catch (Exception ex) {
             tfWeightLbs.setText("");
         }
     }
 
-    private void loadSkills() {
-        skillMap.clear();
-        java.io.File file = new java.io.File("Shadowrun_Core_Skills.csv");
-        if (!file.exists()) return;
-        try (java.io.BufferedReader br = new java.io.BufferedReader(new java.io.FileReader(file))) {
+    private void loadSkills() {
+        skillMap.clear();
+        java.io.File file = new java.io.File("Shadowrun_Core_Skills.csv");
+        if (!file.exists()) return;
+        try (java.io.BufferedReader br = new java.io.BufferedReader(new java.io.FileReader(file))) {
             String line = br.readLine();
             while ((line = br.readLine()) != null) {
                 String[] parts = line.split(",", -1);
-                if (parts.length >= 3) {
-                    String name = parts[0].trim();
-                    String attr = parts[1].trim();
-                    String type = parts[2].trim();
-                    skillMap.put(name, new String[]{attr, type});
-                }
+                if (parts.length >= 3) {
+                    String name = parts[0].trim();
+                    String attr = parts[1].trim();
+                    String category = parts[2].trim();
+                    skillMap.put(name, new String[]{attr, category});
+                }
             }
-        } catch (Exception ignored) {}
-    }
+        } catch (Exception ignored) {}
+    }
+
+    private void loadSpecializations() {
+        specializationMap.clear();
+        java.io.File file = new java.io.File("Shadowrun_Specializations.csv");
+        if (!file.exists()) return;
+        try (java.io.BufferedReader br = new java.io.BufferedReader(new java.io.FileReader(file))) {
+            String line = br.readLine();
+            while ((line = br.readLine()) != null) {
+                String[] parts = line.split(",", -1);
+                if (parts.length >= 4) {
+                    String spec = parts[0].trim();
+                    String parent = parts[1].trim();
+                    String attr = parts[2].trim();
+                    String cat = parts[3].trim();
+                    specializationMap.put(spec, new String[]{parent, attr, cat});
+                }
+            }
+        } catch (Exception ignored) {}
+    }
+
+    private void showAddSkillDialog() {
+        JDialog dialog = new JDialog(frame, "Add Skill Dialog", true);
+        JPanel main = new JPanel(new GridBagLayout());
+        GridBagConstraints c = new GridBagConstraints();
+        c.insets = new Insets(4,4,4,4);
+        c.anchor = GridBagConstraints.WEST;
+        int row = 0;
+
+        c.gridx = 0; c.gridy = row; main.add(new JLabel("Type:"), c);
+        JComboBox<String> cbType = new JComboBox<>(new String[]{"General","Specialization","Knowledge","Language"});
+        c.gridx = 1; main.add(cbType, c); row++;
+
+        CardLayout cl = new CardLayout();
+        JPanel cards = new JPanel(cl);
+
+        // General card
+        JPanel general = new JPanel(new GridBagLayout());
+        GridBagConstraints gc = new GridBagConstraints();
+        gc.insets = new Insets(2,2,2,2); gc.anchor = GridBagConstraints.WEST;
+        int gr = 0;
+        gc.gridx=0; gc.gridy=gr; general.add(new JLabel("Skill Name:"), gc);
+        JComboBox<String> cbGenSkill = new JComboBox<>(skillMap.keySet().toArray(new String[0]));
+        gc.gridx=1; general.add(cbGenSkill, gc); gr++;
+        gc.gridx=0; gc.gridy=gr; general.add(new JLabel("Category:"), gc);
+        JTextField tfGenCat = new JTextField(15); tfGenCat.setEditable(false);
+        gc.gridx=1; general.add(tfGenCat, gc); gr++;
+        gc.gridx=0; gc.gridy=gr; general.add(new JLabel("Primary Attribute:"), gc);
+        JTextField tfGenAttr = new JTextField(15); tfGenAttr.setEditable(false);
+        gc.gridx=1; general.add(tfGenAttr, gc); gr++;
+        gc.gridx=0; gc.gridy=gr; general.add(new JLabel("Rank:"), gc);
+        JComboBox<String> cbGenRank = new JComboBox<>(RANK_OPTIONS);
+        gc.gridx=1; general.add(cbGenRank, gc);
+
+        cbGenSkill.addActionListener(e -> {
+            String s = (String) cbGenSkill.getSelectedItem();
+            if (s != null && skillMap.containsKey(s)) {
+                String[] info = skillMap.get(s);
+                tfGenAttr.setText(info[0]);
+                tfGenCat.setText(info[1]);
+            } else {
+                tfGenAttr.setText("");
+                tfGenCat.setText("");
+            }
+        });
+        if(cbGenSkill.getItemCount()>0) cbGenSkill.setSelectedIndex(0);
+
+        // Specialization card
+        JPanel spec = new JPanel(new GridBagLayout());
+        GridBagConstraints sc = new GridBagConstraints();
+        sc.insets = new Insets(2,2,2,2); sc.anchor = GridBagConstraints.WEST;
+        int sr = 0;
+        sc.gridx=0; sc.gridy=sr; spec.add(new JLabel("Specialization:"), sc);
+        JComboBox<String> cbSpec = new JComboBox<>(specializationMap.keySet().toArray(new String[0]));
+        sc.gridx=1; spec.add(cbSpec, sc); sr++;
+        sc.gridx=0; sc.gridy=sr; spec.add(new JLabel("Parent Skill:"), sc);
+        JTextField tfParent = new JTextField(15); tfParent.setEditable(false);
+        sc.gridx=1; spec.add(tfParent, sc); sr++;
+        sc.gridx=0; sc.gridy=sr; spec.add(new JLabel("Category:"), sc);
+        JTextField tfSpecCat = new JTextField(15); tfSpecCat.setEditable(false);
+        sc.gridx=1; spec.add(tfSpecCat, sc); sr++;
+        sc.gridx=0; sc.gridy=sr; spec.add(new JLabel("Primary Attribute:"), sc);
+        JTextField tfSpecAttr = new JTextField(15); tfSpecAttr.setEditable(false);
+        sc.gridx=1; spec.add(tfSpecAttr, sc); sr++;
+        sc.gridx=0; sc.gridy=sr; spec.add(new JLabel("Rank:"), sc);
+        JComboBox<String> cbSpecRank = new JComboBox<>(RANK_OPTIONS);
+        sc.gridx=1; spec.add(cbSpecRank, sc);
+
+        cbSpec.addActionListener(e -> {
+            String s = (String) cbSpec.getSelectedItem();
+            if (s != null && specializationMap.containsKey(s)) {
+                String[] info = specializationMap.get(s);
+                tfParent.setText(info[0]);
+                tfSpecAttr.setText(info[1]);
+                tfSpecCat.setText(info[2]);
+            } else {
+                tfParent.setText("");
+                tfSpecAttr.setText("");
+                tfSpecCat.setText("");
+            }
+        });
+        if(cbSpec.getItemCount()>0) cbSpec.setSelectedIndex(0);
+
+        // Knowledge card
+        JPanel knowledge = new JPanel(new GridBagLayout());
+        GridBagConstraints kc = new GridBagConstraints();
+        kc.insets = new Insets(2,2,2,2); kc.anchor = GridBagConstraints.WEST;
+        kc.gridx=0; kc.gridy=0; knowledge.add(new JLabel("Area/Field:"), kc);
+        JTextField tfKnowledge = new JTextField(15);
+        kc.gridx=1; knowledge.add(tfKnowledge, kc);
+
+        // Language card
+        JPanel language = new JPanel(new GridBagLayout());
+        GridBagConstraints lc = new GridBagConstraints();
+        lc.insets = new Insets(2,2,2,2); lc.anchor = GridBagConstraints.WEST;
+        lc.gridx=0; lc.gridy=0; language.add(new JLabel("Language:"), lc);
+        JTextField tfLanguage = new JTextField(15);
+        lc.gridx=1; language.add(tfLanguage, lc); lc.gridy=1; lc.gridx=0; language.add(new JLabel("Proficiency:"), lc);
+        JComboBox<String> cbProf = new JComboBox<>(new String[]{"Novice","Specialist","Expert","Native"});
+        lc.gridx=1; language.add(cbProf, lc);
+
+        cards.add(general, "General");
+        cards.add(spec, "Specialization");
+        cards.add(knowledge, "Knowledge");
+        cards.add(language, "Language");
+
+        c.gridx = 0; c.gridy = row; c.gridwidth = 2;
+        main.add(cards, c); row++;
+
+        JPanel btnPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
+        JButton btnSave = new JButton("Save");
+        JButton btnCancel = new JButton("Cancel");
+        btnPanel.add(btnSave); btnPanel.add(btnCancel);
+        c.gridx=0; c.gridy=row; c.gridwidth=2; main.add(btnPanel,c);
+
+        cbType.addActionListener(e -> {
+            String t = (String) cbType.getSelectedItem();
+            cl.show(cards, t);
+        });
+        cbType.setSelectedIndex(0);
+
+        btnCancel.addActionListener(e -> dialog.dispose());
+
+        btnSave.addActionListener(e -> {
+            String t = (String) cbType.getSelectedItem();
+            String skill=""; String rank=""; String attr=""; String cat="";
+            if ("General".equals(t)) {
+                skill = (String) cbGenSkill.getSelectedItem();
+                rank = (String) cbGenRank.getSelectedItem();
+                attr = tfGenAttr.getText();
+                cat = tfGenCat.getText();
+            } else if ("Specialization".equals(t)) {
+                skill = (String) cbSpec.getSelectedItem();
+                rank = (String) cbSpecRank.getSelectedItem();
+                attr = tfSpecAttr.getText();
+                cat = tfSpecCat.getText();
+            } else if ("Knowledge".equals(t)) {
+                skill = tfKnowledge.getText();
+                rank = "N/A";
+            } else if ("Language".equals(t)) {
+                skill = tfLanguage.getText();
+                rank = (String) cbProf.getSelectedItem();
+            }
+            if (skill != null && !skill.trim().isEmpty()) {
+                skillsTableModel.addRow(new Object[]{skill, rank, t, attr, cat});
+                updateSkillCount();
+            }
+            dialog.dispose();
+        });
+
+        dialog.getContentPane().add(main);
+        dialog.pack();
+        dialog.setLocationRelativeTo(frame);
+        dialog.setVisible(true);
+    }
 
     private void loadArchetypes() {
         cbRole.removeAllItems();
         archetypeMap.clear();
         java.io.File file = new java.io.File("Shadowrun_Archetype.csv");
         if (!file.exists()) return;
         try (java.io.BufferedReader br = new java.io.BufferedReader(new java.io.FileReader(file))) {
             String line = br.readLine();
             while ((line = br.readLine()) != null) {
                 String[] parts = line.split(",(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)", -1);
                 if (parts.length >= 3) {
                     String name = parts[0].trim();
                     String desc = parts[1].replaceAll("^\"|\"$", "").trim();
                     String focus = parts[2].trim();
                     cbRole.addItem(name);
                     archetypeMap.put(name, new String[]{name, desc, focus});
                 }
             }
         } catch (Exception ignored) {}
     }
 
 /*
  * Future feature: Weapons and Armor section
 private void buildWeaponsArmorSection() {
         JPanel panel = new JPanel();
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index da9eb0b329664a06858b039f03922c9d7d9be662..db94c7cfac805b3759e21f30f7ec07d329bf9892 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -782,58 +973,61 @@ private void buildAdeptPowersSection() {
         sb.append("=== Shadowrun 6e Character Report ===\n\n");
         sb.append("-- Personal Data --\n");
         sb.append(String.format("Name: %s\n", tfName.getText()));
         sb.append(String.format("Player: %s\n", tfPlayer.getText()));
         sb.append(String.format("Role: %s   Metatype: %s   Gender: %s   Age: %s   Height (cm): %s   Weight (kg): %s\n",
                 cbRole.getSelectedItem(), cbMetatype.getSelectedItem(),
                 cbGender.getSelectedItem(), tfAge.getText(),
                 tfHeight.getText(), tfWeight.getText()));
 
         sb.append("\n-- Attributes --\n");
         sb.append(String.format("Body: %s   Agility: %s   Reaction: %s   Strength: %s   Willpower: %s\n",
                 spBody.getValue(), spAgility.getValue(), spReaction.getValue(), spStrength.getValue(), spWillpower.getValue()));
         sb.append(String.format("Logic: %s   Intuition: %s   Charisma: %s   Edge: %s   Essence: %s\n",
                 spLogic.getValue(), spIntuition.getValue(), spCharisma.getValue(), spEdge.getValue(), spEssence.getValue()));
         sb.append(String.format("Magic: %s   Resonance: %s\n",
                 spMagic.getValue(), spResonance.getValue()));
         // Initiative and other derived stats will be added later
 
         // Condition Monitor will be added in a future version
 
         sb.append("\n-- Skills --\n");
         StringBuilder skillsBuilder = new StringBuilder();
         for (int i = 0; i < skillsTableModel.getRowCount(); i++) {
             String skill = (String) skillsTableModel.getValueAt(i, 0);
             String rank = (String) skillsTableModel.getValueAt(i, 1);
-            String attribute = (String) skillsTableModel.getValueAt(i, 2);
-            String type = (String) skillsTableModel.getValueAt(i, 3);
-            if (skill != null && !skill.trim().isEmpty()) {
-                skillsBuilder.append(String.format("%s, %s, %s, %s\n",
-                        skill, rank == null ? "" : rank,
-                        attribute == null ? "" : attribute,
-                        type == null ? "" : type));
-            }
+            String type = (String) skillsTableModel.getValueAt(i, 2);
+            String attribute = (String) skillsTableModel.getValueAt(i, 3);
+            String category = (String) skillsTableModel.getValueAt(i, 4);
+            if (skill != null && !skill.trim().isEmpty()) {
+                skillsBuilder.append(String.format("%s, %s, %s, %s, %s\n",
+                        skill,
+                        rank == null ? "" : rank,
+                        type == null ? "" : type,
+                        attribute == null ? "" : attribute,
+                        category == null ? "" : category));
+            }
         }
         sb.append(skillsBuilder.length() == 0 ? "None\n" : skillsBuilder.toString());
 
         sb.append("\n-- Qualities --\n");
         StringBuilder qualBuilder = new StringBuilder();
         for (int i = 0; i < qualitiesTableModel.getRowCount(); i++) {
             String q = (String) qualitiesTableModel.getValueAt(i, 0);
             String type = (String) qualitiesTableModel.getValueAt(i, 1);
             String karma = (String) qualitiesTableModel.getValueAt(i, 2);
             String cat = (String) qualitiesTableModel.getValueAt(i, 3);
             if (q != null && !q.trim().isEmpty()) {
                 qualBuilder.append(String.format("%s, %s, %s, %s\n",
                         q, type == null ? "" : type,
                         karma == null ? "" : karma,
                         cat == null ? "" : cat));
             }
         }
         sb.append(qualBuilder.length() == 0 ? "None\n" : qualBuilder.toString());
 
         sb.append("\n-- Contacts --\n");
         StringBuilder contactBuilder = new StringBuilder();
         for (int i = 0; i < contactsTableModel.getRowCount(); i++) {
             String name = (String) contactsTableModel.getValueAt(i, 0);
             String loyalty = (String) contactsTableModel.getValueAt(i, 1);
             String connection = (String) contactsTableModel.getValueAt(i, 2);
 
EOF
)