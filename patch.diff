 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index 23e9148e6c92cb2cdbd61f1d1d16cee00e5f657b..e50b14515f93b6f4cb5a3806ea3af3c32e7d48ce 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -23,108 +23,123 @@ public class ShadowrunCharacterBuilderGUI {
     
     // PERSONAL DATA fields
     private JTextField tfName, tfPlayer, tfAge,
                        tfHeight, tfHeightFt, tfWeight, tfWeightLbs;
     private JComboBox<String> cbRole;
     private JComboBox<MetaItem> cbMetatype;
     private JComboBox<String> cbGender;
     private JTextField tfNuyen, tfPrimaryLifestyle, tfFakeIDs;
     private JTextArea taNotes;
     
     // ATTRIBUTES fields
     private JSpinner spBody, spAgility, spReaction, spStrength,
                      spWillpower, spLogic, spIntuition, spCharisma,
                      spEdge, spEssence, spMagic, spResonance;
     // TODO later: initiative and other derived stats
     // private JTextField tfInitiative, tfMatrixInitiative, tfAstralInitiative,
     //                    tfJudgeIntentions, tfMemory, tfLiftCarry, tfMovement,
     //                    tfUnarmedAR, tfDefenseRating;
     
     // CONDITION MONITOR fields (future feature)
     // private JTextField tfPhysicalBoxes, tfStunBoxes;
     
     // SKILLS table and QUALITIES/CONTACTS tables
     private JTable tableSkills;
     private DefaultTableModel skillsTableModel;
-    private JTable tableQualities;
-    private DefaultTableModel qualitiesTableModel;
-    private JTable tableContacts;
-    private DefaultTableModel contactsTableModel;
+    private JTable tableQualities;
+    private DefaultTableModel qualitiesTableModel;
+    private JTable tableContacts;
+    private DefaultTableModel contactsTableModel;
     private JLabel lblSkillCount;
     private JLabel lblQualityCount;
     private java.util.Map<String, double[]> metatypeMap = new java.util.LinkedHashMap<>();
     private java.util.Map<String, String[]> archetypeMap = new java.util.LinkedHashMap<>();
     private java.util.Map<String, String[]> skillMap = new java.util.LinkedHashMap<>();
-    private java.util.Map<String, String[]> specializationMap = new java.util.LinkedHashMap<>();
+    private java.util.Map<String, String[]> specializationMap = new java.util.LinkedHashMap<>();
+    private java.util.List<QualityEntry> qualityEntries = new java.util.ArrayList<>();
 
     private static final String[] RANK_OPTIONS = {
             "1 - Novice",
             "2 - Advanced Beginner",
             "3 - Journeyman",
             "4 - Professional",
             "5 - Advanced Professional",
             "6 - Local Legend",
             "7 - Elite",
             "8 - Professional Elite",
             "9 - National Elite",
             "10 - Multinational Elite",
             "11 - Global Elite",
             "12 - GOAT"
     };
     
     // WEAPONS, ARMOR: future feature
     // private JTextArea taRangedWeapons, taMeleeWeapons, taArmor;
     
     // MATRIX STATS - future feature
     // private JTextField tfMatrixAttack, tfMatrixSleaze, tfMatrixDataProc, tfMatrixFirewall,
     //                    tfMatrixConditionBoxes;
     // private JTextArea taMatrixDevices;
     
     // AUGMENTATIONS - future feature
     // private JTextArea taAugmentations;
     
     // VEHICLE - future feature
     // private JTextField tfVehicleName, tfVehicleHandling, tfVehicleAcceleration,
     //                    tfVehicleSpeedInterval, tfVehicleTopSpeed, tfVehicleBody,
     //                    tfVehicleArmor, tfVehiclePilot, tfVehicleSensor, tfVehicleSeats;
     // private JTextArea taVehicleNotes;
     
     // GEAR - to be developed later
     // private JTextArea taGear;
     
     // SPELLS/ RITUALS/ COMPLEX FORMS - future feature
     // private JTextArea taSpellsRituals;
     
     // ADEPT POWERS - future feature
     // private JTextArea taAdeptPowers;
 
-    private static class MetaItem {
-        String name;
-        boolean variant;
-        MetaItem(String n, boolean v) { this.name = n; this.variant = v; }
-        public String toString() { return name; }
-    }
+    private static class MetaItem {
+        String name;
+        boolean variant;
+        MetaItem(String n, boolean v) { this.name = n; this.variant = v; }
+        public String toString() { return name; }
+    }
+
+    private static class QualityEntry {
+        String name;
+        String type;
+        String category;
+        int karma;
+        String instance;
+        int min;
+        int max;
+        QualityEntry(String n, String t, String c, int k, String i, int mn, int mx) {
+            name = n; type = t; category = c; karma = k; instance = i; min = mn; max = mx;
+        }
+        public String toString() { return name; }
+    }
     
     public ShadowrunCharacterBuilderGUI() {
         frame = new JFrame("Shadowrun 6e Character Builder");
         frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
         frame.setSize(900, 600);
 
         contentPanel = new JPanel();
         contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS));
         contentPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
 
         // Build each section
         buildPersonalDataSection();
         buildAttributesSection();
         // buildConditionMonitorSection(); // TODO expand later
 
         tabs = new JTabbedPane();
         tabs.setPreferredSize(new Dimension(850, 250));
         tabs.addTab("Skills", buildSkillsSection());
         tabs.addTab("Qualities", buildQualitiesSection());
         tabs.addTab("Contacts", buildContactsSection());
         tabs.addTab("Lifestyle", buildLifestyleSection());
         tabs.addTab("Notes", buildNotesSection());
         contentPanel.add(tabs);
 
         // Generate Button
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index 23e9148e6c92cb2cdbd61f1d1d16cee00e5f657b..e50b14515f93b6f4cb5a3806ea3af3c32e7d48ce 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -377,74 +392,84 @@ private void buildConditionMonitorSection() {
                 if (row != -1) {
                     skillsTableModel.removeRow(row);
                     updateSkillCount();
                 }
             }
         });
         lblSkillCount = new JLabel("0 skills");
         JPanel buttonSub = new JPanel(new FlowLayout(FlowLayout.LEFT));
         buttonSub.add(btnAddSkill);
         buttonSub.add(btnRemoveSkill);
         JPanel btnPanel = new JPanel(new BorderLayout());
         btnPanel.add(buttonSub, BorderLayout.WEST);
         btnPanel.add(lblSkillCount, BorderLayout.EAST);
 
         panel.add(new JLabel("Enter skills:"), BorderLayout.NORTH);
         panel.add(sp, BorderLayout.CENTER);
         panel.add(btnPanel, BorderLayout.SOUTH);
         updateSkillCount();
         return panel;
     }
 
     private JPanel buildQualitiesSection() {
         JPanel panel = new JPanel(new BorderLayout());
         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Qualities", TitledBorder.LEFT, TitledBorder.TOP));
 
-        qualitiesTableModel = new DefaultTableModel(new Object[]{"Quality", "Type", "Karma", "Category"}, 0) {
-            public boolean isCellEditable(int r, int c) { return false; }
-        };
-        tableQualities = new JTable(qualitiesTableModel);
-        tableQualities.setPreferredScrollableViewportSize(new Dimension(500, 150));
-        JScrollPane sp = new JScrollPane(tableQualities);
-
-        JButton btnAddQuality = new JButton("Add Quality");
-        btnAddQuality.addActionListener(new ActionListener() {
-            public void actionPerformed(ActionEvent e) {
-                qualitiesTableModel.addRow(new Object[]{"", "Positive", "", ""});
-                updateQualityCount();
-            }
-        });
-        JButton btnRemoveQuality = new JButton("Remove Quality");
-        btnRemoveQuality.addActionListener(new ActionListener() {
-            public void actionPerformed(ActionEvent e) {
-                int row = tableQualities.getSelectedRow();
-                if (row != -1) {
-                    qualitiesTableModel.removeRow(row);
-                    updateQualityCount();
-                }
-            }
-        });
+        qualitiesTableModel = new DefaultTableModel(new Object[]{"Quality", "Type", "Karma", "Category"}, 0) {
+            public boolean isCellEditable(int r, int c) { return false; }
+        };
+        tableQualities = new JTable(qualitiesTableModel);
+        tableQualities.setAutoCreateRowSorter(true);
+        tableQualities.setPreferredScrollableViewportSize(new Dimension(500, 150));
+        JScrollPane sp = new JScrollPane(tableQualities);
+
+        loadQualities();
+
+        JButton btnAddQuality = new JButton("Add Quality");
+        btnAddQuality.addActionListener(new ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                showAddQualityDialog();
+            }
+        });
+        JButton btnRemoveQuality = new JButton("Remove Quality");
+        btnRemoveQuality.addActionListener(new ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                int row = tableQualities.getSelectedRow();
+                if (row != -1) {
+                    int modelRow = tableQualities.convertRowIndexToModel(row);
+                    Object cat = qualitiesTableModel.getValueAt(modelRow, 3);
+                    if ("Metatype".equals(cat)) {
+                        JOptionPane.showMessageDialog(frame,
+                                "ERROR: Qualities inherited from a Metatype cannot be removed.",
+                                "Error", JOptionPane.ERROR_MESSAGE);
+                        return;
+                    }
+                    qualitiesTableModel.removeRow(modelRow);
+                    updateQualityCount();
+                }
+            }
+        });
         lblQualityCount = new JLabel("0 qualities");
         JPanel buttonSub = new JPanel(new FlowLayout(FlowLayout.LEFT));
         buttonSub.add(btnAddQuality);
         buttonSub.add(btnRemoveQuality);
         JPanel btnPanel = new JPanel(new BorderLayout());
         btnPanel.add(buttonSub, BorderLayout.WEST);
         btnPanel.add(lblQualityCount, BorderLayout.EAST);
 
         panel.add(new JLabel("Enter qualities:"), BorderLayout.NORTH);
         panel.add(sp, BorderLayout.CENTER);
         panel.add(btnPanel, BorderLayout.SOUTH);
         updateQualityCount();
         return panel;
     }
 
     private JPanel buildContactsSection() {
         JPanel panel = new JPanel(new BorderLayout());
         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Contacts", TitledBorder.LEFT, TitledBorder.TOP));
 
         contactsTableModel = new DefaultTableModel(new Object[]{"Name", "Loyalty", "Connection"}, 0);
         tableContacts = new JTable(contactsTableModel);
         tableContacts.setPreferredScrollableViewportSize(new Dimension(500, 150));
         JScrollPane sp = new JScrollPane(tableContacts);
 
         JButton btnAddContact = new JButton("Add Contact");
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index 23e9148e6c92cb2cdbd61f1d1d16cee00e5f657b..e50b14515f93b6f4cb5a3806ea3af3c32e7d48ce 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -603,71 +628,95 @@ private void buildConditionMonitorSection() {
                     qualitiesTableModel.addRow(new Object[]{trait, type, "0", "Metatype"});
                 }
             }
         } catch (Exception ignored) {}
         updateQualityCount();
     }
 
     private void loadSkills() {
         skillMap.clear();
         java.io.File file = new java.io.File("Shadowrun_Core_Skills.csv");
         if (!file.exists()) return;
         try (java.io.BufferedReader br = new java.io.BufferedReader(new java.io.FileReader(file))) {
             String line = br.readLine();
             while ((line = br.readLine()) != null) {
                 String[] parts = line.split(",", -1);
                 if (parts.length >= 3) {
                     String name = parts[0].trim();
                     String attr = parts[1].trim();
                     String category = parts[2].trim();
                     skillMap.put(name, new String[]{attr, category});
                 }
             }
         } catch (Exception ignored) {}
     }
 
-    private void loadSpecializations() {
-        specializationMap.clear();
-        java.io.File file = new java.io.File("Shadowrun_Specializations.csv");
-        if (!file.exists()) return;
-        try (java.io.BufferedReader br = new java.io.BufferedReader(new java.io.FileReader(file))) {
+    private void loadSpecializations() {
+        specializationMap.clear();
+        java.io.File file = new java.io.File("Shadowrun_Specializations.csv");
+        if (!file.exists()) return;
+        try (java.io.BufferedReader br = new java.io.BufferedReader(new java.io.FileReader(file))) {
             String line = br.readLine();
             while ((line = br.readLine()) != null) {
                 String[] parts = line.split(",", -1);
                 if (parts.length >= 4) {
                     String spec = parts[0].trim();
                     String parent = parts[1].trim();
                     String attr = parts[2].trim();
                     String cat = parts[3].trim();
                     specializationMap.put(spec, new String[]{parent, attr, cat});
                 }
             }
-        } catch (Exception ignored) {}
-    }
-
-    private void showAddSkillDialog() {
-        JDialog dialog = new JDialog(frame, "Add Skill Dialog", true);
+        } catch (Exception ignored) {}
+    }
+
+    private void loadQualities() {
+        qualityEntries.clear();
+        java.io.File file = new java.io.File("Shadowrun_Qualities.csv");
+        if (!file.exists()) return;
+        try (java.io.BufferedReader br = new java.io.BufferedReader(new java.io.FileReader(file))) {
+            String line = br.readLine();
+            while ((line = br.readLine()) != null) {
+                String[] parts = line.split(",(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)", -1);
+                if (parts.length >= 7) {
+                    String name = parts[0].replaceAll("^\"|\"$", "").trim();
+                    String type = parts[1].trim();
+                    String category = parts[2].trim();
+                    int karma = 0;
+                    try { karma = Integer.parseInt(parts[3].trim()); } catch (Exception ex) {}
+                    String instance = parts[4].trim();
+                    int mn = 1, mx = 1;
+                    try { mn = Integer.parseInt(parts[5].trim()); } catch (Exception ex) {}
+                    try { mx = Integer.parseInt(parts[6].trim()); } catch (Exception ex) {}
+                    qualityEntries.add(new QualityEntry(name, type, category, karma, instance, mn, mx));
+                }
+            }
+        } catch (Exception ignored) {}
+    }
+
+    private void showAddSkillDialog() {
+        JDialog dialog = new JDialog(frame, "Add Skill Dialog", true);
         JPanel main = new JPanel(new GridBagLayout());
         GridBagConstraints c = new GridBagConstraints();
         c.insets = new Insets(4,4,4,4);
         c.anchor = GridBagConstraints.WEST;
         int row = 0;
 
         c.gridx = 0; c.gridy = row; main.add(new JLabel("Type:"), c);
         JComboBox<String> cbType = new JComboBox<>(new String[]{"General","Specialization","Knowledge","Language"});
         c.gridx = 1; main.add(cbType, c); row++;
 
         CardLayout cl = new CardLayout();
         JPanel cards = new JPanel(cl);
 
         // General card
         JPanel general = new JPanel(new GridBagLayout());
         GridBagConstraints gc = new GridBagConstraints();
         gc.insets = new Insets(2,2,2,2); gc.anchor = GridBagConstraints.WEST;
         int gr = 0;
         gc.gridx=0; gc.gridy=gr; general.add(new JLabel("Skill Name:"), gc);
         JComboBox<String> cbGenSkill = new JComboBox<>(skillMap.keySet().toArray(new String[0]));
         gc.gridx=1; general.add(cbGenSkill, gc); gr++;
         gc.gridx=0; gc.gridy=gr; general.add(new JLabel("Category:"), gc);
         JTextField tfGenCat = new JTextField(15); tfGenCat.setEditable(false);
         gc.gridx=1; general.add(tfGenCat, gc); gr++;
         gc.gridx=0; gc.gridy=gr; general.add(new JLabel("Primary Attribute:"), gc);
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index 23e9148e6c92cb2cdbd61f1d1d16cee00e5f657b..e50b14515f93b6f4cb5a3806ea3af3c32e7d48ce 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -773,53 +822,158 @@ private void buildConditionMonitorSection() {
                 skill = (String) cbGenSkill.getSelectedItem();
                 rank = (String) cbGenRank.getSelectedItem();
                 attr = tfGenAttr.getText();
                 cat = tfGenCat.getText();
             } else if ("Specialization".equals(t)) {
                 skill = (String) cbSpec.getSelectedItem();
                 rank = (String) cbSpecRank.getSelectedItem();
                 attr = tfSpecAttr.getText();
                 cat = tfSpecCat.getText();
             } else if ("Knowledge".equals(t)) {
                 skill = "KB: " + tfKnowledge.getText();
                 rank = "N/A";
             } else if ("Language".equals(t)) {
                 skill = "LG: " + tfLanguage.getText();
                 rank = (String) cbProf.getSelectedItem();
             }
             if (skill != null && !skill.trim().isEmpty()) {
                 skillsTableModel.addRow(new Object[]{t, skill, rank, attr, cat});
                 updateSkillCount();
             }
             dialog.dispose();
         });
 
         dialog.getContentPane().add(main);
         dialog.pack();
-        dialog.setLocationRelativeTo(frame);
-        dialog.setVisible(true);
-    }
+        dialog.setLocationRelativeTo(frame);
+        dialog.setVisible(true);
+    }
+
+    private void showAddQualityDialog() {
+        JDialog dialog = new JDialog(frame, "Add Quality Dialog", true);
+        JPanel main = new JPanel(new GridBagLayout());
+        GridBagConstraints c = new GridBagConstraints();
+        c.insets = new Insets(4,4,4,4);
+        c.anchor = GridBagConstraints.WEST;
+        int row = 0;
+
+        c.gridx = 0; c.gridy = row; main.add(new JLabel("Category:"), c);
+        JComboBox<String> cbCategory = new JComboBox<>(new String[]{"Magic","Matrix","Mental","Physical","Social","Vehicle"});
+        c.gridx = 1; main.add(cbCategory, c); row++;
+
+        c.gridx = 0; c.gridy = row; main.add(new JLabel("Type:"), c);
+        JComboBox<String> cbType = new JComboBox<>(new String[]{"Positive","Negative"});
+        c.gridx = 1; main.add(cbType, c); row++;
+
+        c.gridx = 0; c.gridy = row; main.add(new JLabel("Quality Name:"), c);
+        JComboBox<QualityEntry> cbName = new JComboBox<>();
+        c.gridx = 1; main.add(cbName, c); row++;
+
+        JLabel lblLevel = new JLabel("Level:");
+        c.gridx = 0; c.gridy = row; main.add(lblLevel, c);
+        SpinnerNumberModel levelModel = new SpinnerNumberModel(1,1,1,1);
+        JSpinner spLevel = new JSpinner(levelModel);
+        c.gridx = 1; main.add(spLevel, c); row++;
+
+        c.gridx = 0; c.gridy = row; main.add(new JLabel("Karma:"), c);
+        JTextField tfKarma = new JTextField(6); tfKarma.setEditable(false);
+        c.gridx = 1; main.add(tfKarma, c); row++;
+
+        JPanel btnPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
+        JButton btnSave = new JButton("Save");
+        JButton btnCancel = new JButton("Cancel");
+        btnPanel.add(btnSave); btnPanel.add(btnCancel);
+        c.gridx = 0; c.gridy = row; c.gridwidth = 2;
+        main.add(btnPanel, c);
+
+        Runnable updateNames = () -> {
+            cbName.removeAllItems();
+            String cat = (String) cbCategory.getSelectedItem();
+            String type = (String) cbType.getSelectedItem();
+            for (QualityEntry qe : qualityEntries) {
+                if (qe.category.equalsIgnoreCase(cat) && qe.type.equalsIgnoreCase(type)) {
+                    cbName.addItem(qe);
+                }
+            }
+            if (cbName.getItemCount() > 0) {
+                cbName.setSelectedIndex(0);
+            } else {
+                tfKarma.setText("");
+                lblLevel.setVisible(false);
+                spLevel.setVisible(false);
+            }
+        };
+
+        Runnable updateFields = () -> {
+            QualityEntry qe = (QualityEntry) cbName.getSelectedItem();
+            if (qe == null) return;
+            boolean isLevel = "Level".equalsIgnoreCase(qe.instance);
+            lblLevel.setVisible(isLevel);
+            spLevel.setVisible(isLevel);
+            if (isLevel) {
+                levelModel.setMinimum(qe.min);
+                levelModel.setMaximum(qe.max);
+                levelModel.setValue(Math.max(qe.min,1));
+            } else {
+                levelModel.setMinimum(1);
+                levelModel.setMaximum(1);
+                spLevel.setValue(1);
+            }
+            int lvl = ((Number) spLevel.getValue()).intValue();
+            int karma = qe.karma;
+            if (isLevel) karma = karma * lvl;
+            tfKarma.setText(String.valueOf(karma));
+        };
+
+        cbCategory.addActionListener(e -> { updateNames.run(); });
+        cbType.addActionListener(e -> { updateNames.run(); });
+        cbName.addActionListener(e -> { updateFields.run(); });
+        spLevel.addChangeListener(e -> { updateFields.run(); });
+
+        updateNames.run();
+
+        btnCancel.addActionListener(e -> dialog.dispose());
+
+        btnSave.addActionListener(e -> {
+            QualityEntry qe = (QualityEntry) cbName.getSelectedItem();
+            if (qe != null) {
+                int lvl = ((Number) spLevel.getValue()).intValue();
+                int karma = qe.karma;
+                if ("Level".equalsIgnoreCase(qe.instance)) karma = karma * lvl;
+                String name = qe.name;
+                if ("Level".equalsIgnoreCase(qe.instance)) name = name + " (" + lvl + ")";
+                qualitiesTableModel.addRow(new Object[]{name, qe.type, String.valueOf(karma), qe.category});
+                updateQualityCount();
+            }
+            dialog.dispose();
+        });
+
+        dialog.getContentPane().add(main);
+        dialog.pack();
+        dialog.setLocationRelativeTo(frame);
+        dialog.setVisible(true);
+    }
 
     private void loadArchetypes() {
         cbRole.removeAllItems();
         archetypeMap.clear();
         java.io.File file = new java.io.File("Shadowrun_Archetype.csv");
         if (!file.exists()) return;
         try (java.io.BufferedReader br = new java.io.BufferedReader(new java.io.FileReader(file))) {
             String line = br.readLine();
             while ((line = br.readLine()) != null) {
                 String[] parts = line.split(",(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)", -1);
                 if (parts.length >= 3) {
                     String name = parts[0].trim();
                     String desc = parts[1].replaceAll("^\"|\"$", "").trim();
                     String focus = parts[2].trim();
                     cbRole.addItem(name);
                     archetypeMap.put(name, new String[]{name, desc, focus});
                 }
             }
         } catch (Exception ignored) {}
     }
 
 /*
  * Future feature: Weapons and Armor section
 private void buildWeaponsArmorSection() {
         JPanel panel = new JPanel();
 
EOF
)