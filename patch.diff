 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index 13be49977a13261cb2de70fb2e52004d6108eca3..61116d4eb552a86bc5b20436d483e370bb5730e1 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -1,86 +1,93 @@
 import javax.swing.*;
 import javax.swing.border.TitledBorder;
 import javax.swing.table.DefaultTableModel;
-import javax.swing.table.TableColumn;
+import javax.swing.table.TableColumn;
+import javax.swing.event.ChangeListener;
 import java.awt.*;
 import java.awt.event.*;
 import java.io.BufferedWriter;
 import java.io.FileWriter;
 import java.io.IOException;
 
 /**
  * Shadowrun 6e Character Builder with GUI
  * 
  * This program launches a Swing-based interface that mimics the layout and appearance of the
  * two-page Shadowrun 6th Edition character sheet PDF. Users can fill out fields directly and
  * generate a formatted character report.
  */
 public class ShadowrunCharacterBuilderGUI {
     private JFrame frame;
     private JPanel contentPanel;
     private JScrollPane scrollPane;
     private JTabbedPane tabs;
     
     // PERSONAL DATA fields
-    private JTextField tfName, tfPlayer, tfAge,
-                       tfHeight, tfHeightFt, tfWeight, tfWeightLbs;
+    private JTextField tfName, tfPlayer, tfAge,
+                       tfHeight, tfHeightFt, tfWeight, tfWeightLbs,
+                       tfKarma, tfTotalKarma;
     private JComboBox<String> cbRole;
     private JComboBox<MetaItem> cbMetatype;
     private JCheckBox chkSurge;
     private JLabel lblSurgeCollective;
     private JComboBox<String> cbSurgeCollective;
     private JComboBox<String> cbGender;
     private JTextField tfNuyen, tfPrimaryLifestyle, tfFakeIDs;
     private JTextArea taNotes;
     
     // ATTRIBUTES fields
-    private JSpinner spBody, spAgility, spReaction, spStrength,
-                     spWillpower, spLogic, spIntuition, spCharisma,
-                     spEdge, spEssence, spMagic, spResonance;
+    private JSpinner spBody, spAgility, spReaction, spStrength,
+                     spWillpower, spLogic, spIntuition, spCharisma,
+                     spEdge, spEssence, spMagic, spResonance;
+    private JTextField tfComposure, tfJudgeIntentions, tfMemory, tfLiftCarry;
     // TODO later: initiative and other derived stats
     // private JTextField tfInitiative, tfMatrixInitiative, tfAstralInitiative,
     //                    tfJudgeIntentions, tfMemory, tfLiftCarry, tfMovement,
     //                    tfUnarmedAR, tfDefenseRating;
     
     // CONDITION MONITOR fields (future feature)
     // private JTextField tfPhysicalBoxes, tfStunBoxes;
     
     // SKILLS table and QUALITIES/CONTACTS tables
     private JTable tableSkills;
     private DefaultTableModel skillsTableModel;
     private JTable tableQualities;
     private DefaultTableModel qualitiesTableModel;
     private JTable tableContacts;
     private DefaultTableModel contactsTableModel;
     private JLabel lblSkillCount;
     private JLabel lblQualityCount;
     private java.util.Map<String, double[]> metatypeMap = new java.util.LinkedHashMap<>();
     private java.util.Map<String, String[]> archetypeMap = new java.util.LinkedHashMap<>();
     private java.util.Map<String, String[]> skillMap = new java.util.LinkedHashMap<>();
     private java.util.Map<String, String[]> specializationMap = new java.util.LinkedHashMap<>();
-    private java.util.List<QualityEntry> qualityEntries = new java.util.ArrayList<>();
+    private java.util.List<QualityEntry> qualityEntries = new java.util.ArrayList<>();
+    private java.util.Set<Integer> lockedQualityRows = new java.util.HashSet<>();
+
+    private JTable tableKarmaLog;
+    private DefaultTableModel karmaLogModel;
 
     private static final String[] RANK_OPTIONS = {
             "1 - Novice",
             "2 - Advanced Beginner",
             "3 - Journeyman",
             "4 - Professional",
             "5 - Advanced Professional",
             "6 - Local Legend",
             "7 - Elite",
             "8 - Professional Elite",
             "9 - National Elite",
             "10 - Multinational Elite",
             "11 - Global Elite",
             "12 - GOAT"
     };
     
     // WEAPONS, ARMOR: future feature
     // private JTextArea taRangedWeapons, taMeleeWeapons, taArmor;
     
     // MATRIX STATS - future feature
     // private JTextField tfMatrixAttack, tfMatrixSleaze, tfMatrixDataProc, tfMatrixFirewall,
     //                    tfMatrixConditionBoxes;
     // private JTextArea taMatrixDevices;
     
     // AUGMENTATIONS - future feature
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index 13be49977a13261cb2de70fb2e52004d6108eca3..61116d4eb552a86bc5b20436d483e370bb5730e1 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -135,116 +142,129 @@ public class ShadowrunCharacterBuilderGUI {
         buildPersonalDataSection();
         buildAttributesSection();
         // buildConditionMonitorSection(); // TODO expand later
 
         tabs = new JTabbedPane();
         tabs.setPreferredSize(new Dimension(850, 250));
         tabs.addTab("Skills", buildSkillsSection());
         tabs.addTab("Qualities", buildQualitiesSection());
         tabs.addTab("Contacts", buildContactsSection());
         tabs.addTab("Lifestyle", buildLifestyleSection());
         tabs.addTab("Notes", buildNotesSection());
         contentPanel.add(tabs);
 
         // Generate Button
         JButton btnGenerate = new JButton("Generate Report");
         btnGenerate.setAlignmentX(Component.CENTER_ALIGNMENT);
         btnGenerate.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 generateReport();
             }
         });
         contentPanel.add(Box.createRigidArea(new Dimension(0, 10)));
         contentPanel.add(btnGenerate);
         contentPanel.add(Box.createRigidArea(new Dimension(0, 10)));
 
-        scrollPane = new JScrollPane(contentPanel);
-        frame.getContentPane().add(scrollPane);
-        frame.setVisible(true);
-    }
+        scrollPane = new JScrollPane(contentPanel);
+        JPanel rootPanel = new JPanel(new BorderLayout());
+        rootPanel.add(scrollPane, BorderLayout.CENTER);
+        rootPanel.add(buildKarmaLogPanel(), BorderLayout.EAST);
+        frame.getContentPane().add(rootPanel);
+        frame.setVisible(true);
+    }
 
     private void buildPersonalDataSection() {
         JPanel panel = new JPanel(new GridBagLayout());
         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Personal Data", TitledBorder.LEFT, TitledBorder.TOP));
         GridBagConstraints c = new GridBagConstraints();
         c.insets = new Insets(4, 4, 4, 4);
         c.anchor = GridBagConstraints.WEST;
 
         int row = 0;
-        c.gridx = 0; c.gridy = row; panel.add(new JLabel("Character Name:"), c);
-        tfName = new JTextField(20); c.gridx = 1; panel.add(tfName, c);
-        c.gridx = 2; panel.add(new JLabel("Gender:"), c);
-        cbGender = new JComboBox<>(new String[]{"Male", "Female"}); c.gridx = 3; panel.add(cbGender, c);
-        row++;
-
-        c.gridx = 0; c.gridy = row; panel.add(new JLabel("Player Name:"), c);
-        tfPlayer = new JTextField(15); c.gridx = 1; panel.add(tfPlayer, c);
+        c.gridx = 0; c.gridy = row; panel.add(new JLabel("Character Name:"), c);
+        tfName = new JTextField(15); c.gridx = 1; panel.add(tfName, c);
+        Dimension leftDim = new Dimension(150, tfName.getPreferredSize().height);
+        tfName.setPreferredSize(leftDim);
+        c.gridx = 2; panel.add(new JLabel("Gender:"), c);
+        cbGender = new JComboBox<>(new String[]{"Male", "Female"}); c.gridx = 3; panel.add(cbGender, c);
+        row++;
+
+        c.gridx = 0; c.gridy = row; panel.add(new JLabel("Player Name:"), c);
+        tfPlayer = new JTextField(15); tfPlayer.setPreferredSize(leftDim); c.gridx = 1; panel.add(tfPlayer, c);
         c.gridx = 2; panel.add(new JLabel("Age:"), c);
         tfAge = new JTextField(5); c.gridx = 3; panel.add(tfAge, c);
         row++;
 
         c.gridx = 0; c.gridy = row; panel.add(new JLabel("Archetype/Role:"), c);
-        cbRole = new JComboBox<>(); c.gridx = 1; panel.add(cbRole, c);
+        cbRole = new JComboBox<>(); cbRole.setPreferredSize(leftDim); c.gridx = 1; panel.add(cbRole, c);
         JButton btnRoleInfo = new JButton("\u2139");
         btnRoleInfo.setMargin(new Insets(0,0,0,0));
         btnRoleInfo.setVisible(false);
         c.gridx = 2; panel.add(btnRoleInfo, c);
         c.gridx = 3; panel.add(new JLabel("Height (cm):"), c);
         tfHeight = new JTextField(5); c.gridx = 4; panel.add(tfHeight, c);
         c.gridx = 5; panel.add(new JLabel("Height (ft):"), c);
         tfHeightFt = new JTextField(6); tfHeightFt.setEditable(false); c.gridx = 6; panel.add(tfHeightFt, c);
         row++;
 
         c.gridx = 0; c.gridy = row; panel.add(new JLabel("Metatype:"), c);
-        cbMetatype = new JComboBox<>();
+        cbMetatype = new JComboBox<>(); cbMetatype.setPreferredSize(leftDim);
         cbMetatype.setRenderer(new DefaultListCellRenderer() {
             public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                 JLabel lbl = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                 if (value instanceof MetaItem) {
                     MetaItem mi = (MetaItem) value;
                     String text = mi.name;
                     if (index >= 0 && mi.variant) text = " - " + text;
                     lbl.setText(text);
                 }
                 return lbl;
             }
         });
-        c.gridx = 1; panel.add(cbMetatype, c);
-        c.gridx = 3; panel.add(new JLabel("Weight (kg):"), c);
-        tfWeight = new JTextField(5); c.gridx = 4; panel.add(tfWeight, c);
-        c.gridx = 5; panel.add(new JLabel("Weight (lbs):"), c);
-        tfWeightLbs = new JTextField(6); tfWeightLbs.setEditable(false); c.gridx = 6; panel.add(tfWeightLbs, c);
-        row++;
-
-        chkSurge = new JCheckBox("SURGE");
-        c.gridx = 1; c.gridy = row; panel.add(chkSurge, c);
-        row++;
+        c.gridx = 1; panel.add(cbMetatype, c);
+        c.gridx = 3; panel.add(new JLabel("Weight (kg):"), c);
+        tfWeight = new JTextField(5); c.gridx = 4; panel.add(tfWeight, c);
+        c.gridx = 5; panel.add(new JLabel("Weight (lbs):"), c);
+        tfWeightLbs = new JTextField(6); tfWeightLbs.setEditable(false); c.gridx = 6; panel.add(tfWeightLbs, c);
+        row++;
+
+        c.gridx = 3; c.gridy = row; panel.add(new JLabel("Karma:"), c);
+        tfKarma = new JTextField(5); tfKarma.setText("50"); c.gridx = 4; panel.add(tfKarma, c);
+        c.gridx = 5; panel.add(new JLabel("Total Karma:"), c);
+        tfTotalKarma = new JTextField(6); tfTotalKarma.setEditable(false); c.gridx = 6; panel.add(tfTotalKarma, c);
+        row++;
+
+        chkSurge = new JCheckBox("SURGE");
+        chkSurge.setPreferredSize(leftDim);
+        c.gridx = 1; c.gridy = row; panel.add(chkSurge, c);
+        row++;
 
         lblSurgeCollective = new JLabel("SURGE Collective:");
-        cbSurgeCollective = new JComboBox<>();
-        c.gridx = 0; c.gridy = row; panel.add(lblSurgeCollective, c);
-        c.gridx = 1; panel.add(cbSurgeCollective, c);
+        cbSurgeCollective = new JComboBox<>();
+        cbSurgeCollective.setPreferredSize(leftDim);
+        c.gridx = 0; c.gridy = row; panel.add(lblSurgeCollective, c);
+        c.gridx = 1; panel.add(cbSurgeCollective, c);
         lblSurgeCollective.setVisible(false);
         cbSurgeCollective.setVisible(false);
         row++;
 
         loadMetatypes();
         loadSurgeCollectives();
         loadArchetypes();
         cbRole.setSelectedIndex(-1);
         cbMetatype.setSelectedIndex(-1);
         cbGender.setSelectedIndex(-1);
 
         tfHeight.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
             public void insertUpdate(javax.swing.event.DocumentEvent e) { updateHeightFeet(); }
             public void removeUpdate(javax.swing.event.DocumentEvent e) { updateHeightFeet(); }
             public void changedUpdate(javax.swing.event.DocumentEvent e) { updateHeightFeet(); }
         });
         tfWeight.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
             public void insertUpdate(javax.swing.event.DocumentEvent e) { updateWeightLbs(); }
             public void removeUpdate(javax.swing.event.DocumentEvent e) { updateWeightLbs(); }
             public void changedUpdate(javax.swing.event.DocumentEvent e) { updateWeightLbs(); }
         });
 
         chkSurge.addActionListener(e -> {
             boolean sel = chkSurge.isSelected();
             lblSurgeCollective.setVisible(sel);
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index 13be49977a13261cb2de70fb2e52004d6108eca3..61116d4eb552a86bc5b20436d483e370bb5730e1 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -275,103 +295,127 @@ public class ShadowrunCharacterBuilderGUI {
                     String[] vals = archetypeMap.get(sel);
                     JOptionPane.showMessageDialog(frame,
                             "Archetype: " + sel + "\nPrimary Focus: " + vals[2] + "\n" + vals[1],
                             "Archetype Info", JOptionPane.INFORMATION_MESSAGE);
                 }
             }
         });
 
         contentPanel.add(panel);
     }
 
     private void buildAttributesSection() {
         JPanel panel = new JPanel(new GridBagLayout());
         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Attributes", TitledBorder.LEFT, TitledBorder.TOP));
         GridBagConstraints c = new GridBagConstraints();
         c.insets = new Insets(4, 4, 4, 4);
         c.anchor = GridBagConstraints.NORTHWEST;
 
         JPanel physical = new JPanel(new GridBagLayout());
         physical.setBorder(BorderFactory.createTitledBorder("Physical"));
         GridBagConstraints pc = new GridBagConstraints();
         pc.insets = new Insets(2,2,2,2);
         pc.anchor = GridBagConstraints.WEST;
         int prow = 0;
         pc.gridx = 0; pc.gridy = prow; physical.add(new JLabel("Body:"), pc);
-        spBody = new JSpinner(new SpinnerNumberModel(1, 1, 10, 1)); pc.gridx = 1; physical.add(spBody, pc); prow++;
+        spBody = new JSpinner(new SpinnerNumberModel(1, 1, null, 1)); pc.gridx = 1; physical.add(spBody, pc); prow++;
         pc.gridx = 0; pc.gridy = prow; physical.add(new JLabel("Agility:"), pc);
-        spAgility = new JSpinner(new SpinnerNumberModel(1, 1, 10, 1)); pc.gridx = 1; physical.add(spAgility, pc); prow++;
+        spAgility = new JSpinner(new SpinnerNumberModel(1, 1, null, 1)); pc.gridx = 1; physical.add(spAgility, pc); prow++;
         pc.gridx = 0; pc.gridy = prow; physical.add(new JLabel("Reaction:"), pc);
-        spReaction = new JSpinner(new SpinnerNumberModel(1, 1, 10, 1)); pc.gridx = 1; physical.add(spReaction, pc); prow++;
+        spReaction = new JSpinner(new SpinnerNumberModel(1, 1, null, 1)); pc.gridx = 1; physical.add(spReaction, pc); prow++;
         pc.gridx = 0; pc.gridy = prow; physical.add(new JLabel("Strength:"), pc);
-        spStrength = new JSpinner(new SpinnerNumberModel(1, 1, 10, 1)); pc.gridx = 1; physical.add(spStrength, pc);
+        spStrength = new JSpinner(new SpinnerNumberModel(1, 1, null, 1)); pc.gridx = 1; physical.add(spStrength, pc);
 
         JPanel mental = new JPanel(new GridBagLayout());
         mental.setBorder(BorderFactory.createTitledBorder("Mental"));
         GridBagConstraints mc = new GridBagConstraints();
         mc.insets = new Insets(2,2,2,2);
         mc.anchor = GridBagConstraints.WEST;
         int mrow = 0;
-        mc.gridx = 0; mc.gridy = mrow; mental.add(new JLabel("Willpower:"), mc);
-        spWillpower = new JSpinner(new SpinnerNumberModel(1, 1, 10, 1)); mc.gridx = 1; mental.add(spWillpower, mc); mrow++;
-        mc.gridx = 0; mc.gridy = mrow; mental.add(new JLabel("Logic:"), mc);
-        spLogic = new JSpinner(new SpinnerNumberModel(1, 1, 10, 1)); mc.gridx = 1; mental.add(spLogic, mc); mrow++;
-        mc.gridx = 0; mc.gridy = mrow; mental.add(new JLabel("Intuition:"), mc);
-        spIntuition = new JSpinner(new SpinnerNumberModel(1, 1, 10, 1)); mc.gridx = 1; mental.add(spIntuition, mc); mrow++;
-        mc.gridx = 0; mc.gridy = mrow; mental.add(new JLabel("Charisma:"), mc);
-        spCharisma = new JSpinner(new SpinnerNumberModel(1, 1, 10, 1)); mc.gridx = 1; mental.add(spCharisma, mc);
+        mc.gridx = 0; mc.gridy = mrow; mental.add(new JLabel("Willpower:"), mc);
+        spWillpower = new JSpinner(new SpinnerNumberModel(1, 1, null, 1)); mc.gridx = 1; mental.add(spWillpower, mc); mrow++;
+        mc.gridx = 0; mc.gridy = mrow; mental.add(new JLabel("Logic:"), mc);
+        spLogic = new JSpinner(new SpinnerNumberModel(1, 1, null, 1)); mc.gridx = 1; mental.add(spLogic, mc); mrow++;
+        mc.gridx = 0; mc.gridy = mrow; mental.add(new JLabel("Intuition:"), mc);
+        spIntuition = new JSpinner(new SpinnerNumberModel(1, 1, null, 1)); mc.gridx = 1; mental.add(spIntuition, mc); mrow++;
+        mc.gridx = 0; mc.gridy = mrow; mental.add(new JLabel("Charisma:"), mc);
+        spCharisma = new JSpinner(new SpinnerNumberModel(1, 1, null, 1)); mc.gridx = 1; mental.add(spCharisma, mc);
 
         JPanel special = new JPanel(new GridBagLayout());
         special.setBorder(BorderFactory.createTitledBorder("Special"));
         GridBagConstraints sc = new GridBagConstraints();
         sc.insets = new Insets(2,2,2,2);
         sc.anchor = GridBagConstraints.WEST;
         int srow = 0;
         sc.gridx = 0; sc.gridy = srow; special.add(new JLabel("Edge:"), sc);
-        spEdge = new JSpinner(new SpinnerNumberModel(1, 1, 10, 1));
+        spEdge = new JSpinner(new SpinnerNumberModel(1, 1, null, 1));
         Dimension specialDim = new Dimension(60, spEdge.getPreferredSize().height);
         spEdge.setPreferredSize(specialDim);
         sc.gridx = 1; special.add(spEdge, sc); srow++;
         sc.gridx = 0; sc.gridy = srow; special.add(new JLabel("Essence:"), sc);
-        spEssence = new JSpinner(new SpinnerNumberModel(6.00, 0.00, 6.00, 0.01));
+        spEssence = new JSpinner(new SpinnerNumberModel(6.00, 0.01, 6.00, 0.01));
         spEssence.setPreferredSize(specialDim);
         sc.gridx = 1; special.add(spEssence, sc); srow++;
         sc.gridx = 0; sc.gridy = srow; special.add(new JLabel("Magic:"), sc);
-        spMagic = new JSpinner(new SpinnerNumberModel(0, 0, 10, 1));
+        spMagic = new JSpinner(new SpinnerNumberModel(0, 0, null, 1));
         spMagic.setPreferredSize(specialDim);
         sc.gridx = 1; special.add(spMagic, sc); srow++;
         sc.gridx = 0; sc.gridy = srow; special.add(new JLabel("Resonance:"), sc);
-        spResonance = new JSpinner(new SpinnerNumberModel(0, 0, 10, 1));
-        spResonance.setPreferredSize(specialDim);
-        sc.gridx = 1; special.add(spResonance, sc);
+        spResonance = new JSpinner(new SpinnerNumberModel(0, 0, null, 1));
+        spResonance.setPreferredSize(specialDim);
+        sc.gridx = 1; special.add(spResonance, sc);
+
+        JPanel derived = new JPanel(new GridBagLayout());
+        derived.setBorder(BorderFactory.createTitledBorder("Derived"));
+        GridBagConstraints dc = new GridBagConstraints();
+        dc.insets = new Insets(2,2,2,2);
+        dc.anchor = GridBagConstraints.WEST;
+        int drow = 0;
+        dc.gridx = 0; dc.gridy = drow; derived.add(new JLabel("Composure:"), dc);
+        tfComposure = new JTextField(5); tfComposure.setEditable(false); dc.gridx = 1; derived.add(tfComposure, dc); drow++;
+        dc.gridx = 0; dc.gridy = drow; derived.add(new JLabel("Judge Intentions:"), dc);
+        tfJudgeIntentions = new JTextField(5); tfJudgeIntentions.setEditable(false); dc.gridx = 1; derived.add(tfJudgeIntentions, dc); drow++;
+        dc.gridx = 0; dc.gridy = drow; derived.add(new JLabel("Memory:"), dc);
+        tfMemory = new JTextField(5); tfMemory.setEditable(false); dc.gridx = 1; derived.add(tfMemory, dc); drow++;
+        dc.gridx = 0; dc.gridy = drow; derived.add(new JLabel("Lift/Carry:"), dc);
+        tfLiftCarry = new JTextField(5); tfLiftCarry.setEditable(false); dc.gridx = 1; derived.add(tfLiftCarry, dc);
 
         c.gridx = 0; c.gridy = 0; panel.add(physical, c);
-        c.gridx = 1; panel.add(mental, c);
-        c.gridx = 2; panel.add(special, c);
-
-        contentPanel.add(panel);
-    }
+        c.gridx = 1; panel.add(mental, c);
+        c.gridx = 2; panel.add(special, c);
+        c.gridx = 3; panel.add(derived, c);
+
+        contentPanel.add(panel);
+        ChangeListener derivedListener = e -> updateDerivedAttributes();
+        spWillpower.addChangeListener(derivedListener);
+        spCharisma.addChangeListener(derivedListener);
+        spIntuition.addChangeListener(derivedListener);
+        spLogic.addChangeListener(derivedListener);
+        spStrength.addChangeListener(derivedListener);
+        spBody.addChangeListener(derivedListener);
+        updateDerivedAttributes();
+    }
 
 /*
  * Future feature: Condition Monitor section
 private void buildConditionMonitorSection() {
         JPanel panel = new JPanel(new GridBagLayout());
         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Condition Monitor", TitledBorder.LEFT, TitledBorder.TOP));
         GridBagConstraints c = new GridBagConstraints();
         c.insets = new Insets(4, 4, 4, 4);
         c.anchor = GridBagConstraints.WEST;
 
         int row = 0;
         c.gridx = 0; c.gridy = row; panel.add(new JLabel("Physical Damage Track Boxes:"), c);
         tfPhysicalBoxes = new JTextField(5); c.gridx = 1; panel.add(tfPhysicalBoxes, c);
         c.gridx = 2; panel.add(new JLabel("Stun Damage Track Boxes:"), c);
         tfStunBoxes = new JTextField(5); c.gridx = 3; panel.add(tfStunBoxes, c);
 
         contentPanel.add(panel);
     }
 */
 
     private JPanel buildSkillsSection() {
         JPanel panel = new JPanel(new BorderLayout());
         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Skills", TitledBorder.LEFT, TitledBorder.TOP));
 
         skillsTableModel = new DefaultTableModel(new Object[]{"Type", "Skill", "Rank", "Attribute", "Category"}, 0) {
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index 13be49977a13261cb2de70fb2e52004d6108eca3..61116d4eb552a86bc5b20436d483e370bb5730e1 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -425,145 +469,162 @@ private void buildConditionMonitorSection() {
                 if (row != -1) {
                     skillsTableModel.removeRow(row);
                     updateSkillCount();
                 }
             }
         });
         lblSkillCount = new JLabel("0 skills");
         JPanel buttonSub = new JPanel(new FlowLayout(FlowLayout.LEFT));
         buttonSub.add(btnAddSkill);
         buttonSub.add(btnRemoveSkill);
         JPanel btnPanel = new JPanel(new BorderLayout());
         btnPanel.add(buttonSub, BorderLayout.WEST);
         btnPanel.add(lblSkillCount, BorderLayout.EAST);
 
         panel.add(new JLabel("Enter skills:"), BorderLayout.NORTH);
         panel.add(sp, BorderLayout.CENTER);
         panel.add(btnPanel, BorderLayout.SOUTH);
         updateSkillCount();
         return panel;
     }
 
     private JPanel buildQualitiesSection() {
         JPanel panel = new JPanel(new BorderLayout());
         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Qualities", TitledBorder.LEFT, TitledBorder.TOP));
 
-        qualitiesTableModel = new DefaultTableModel(new Object[]{"Category", "Quality", "Type", "Karma"}, 0) {
-            public boolean isCellEditable(int r, int c) {
-                if (c >= 2) return false;
-                Object cat = getValueAt(r, 0);
-                if ("Metatype".equals(cat) || "Metagenetic".equals(cat)) return false;
-                return true;
-            }
-        };
+        qualitiesTableModel = new DefaultTableModel(new Object[]{"Category", "Quality", "Type", "Karma"}, 0) {
+            public boolean isCellEditable(int r, int c) {
+                if (c >= 2) return false;
+                if (lockedQualityRows.contains(r)) return false;
+                Object cat = getValueAt(r, 0);
+                if ("Metatype".equals(cat) || "Metagenetic".equals(cat)) return false;
+                return true;
+            }
+        };
         tableQualities = new JTable(qualitiesTableModel);
         tableQualities.setAutoCreateRowSorter(true);
         tableQualities.setPreferredScrollableViewportSize(new Dimension(500, 150));
 
         String[] qualityCats = {"Magic","Matrix","Mental","Physical","Social","Vehicle"};
         TableColumn catCol = tableQualities.getColumnModel().getColumn(0);
         catCol.setCellEditor(new DefaultCellEditor(new JComboBox<>(qualityCats)));
 
-        TableColumn qualCol = tableQualities.getColumnModel().getColumn(1);
-        qualCol.setCellEditor(new DefaultCellEditor(new JComboBox<String>()) {
-            public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
-                JComboBox<String> box = (JComboBox<String>) this.editorComponent;
-                box.removeAllItems();
-                Object catObj = table.getValueAt(row, 0);
-                String cat = catObj == null ? "" : catObj.toString();
-                for (QualityEntry qe : qualityEntries) {
-                    if (cat.equalsIgnoreCase(qe.category)) {
-                        box.addItem(qe.name);
-                    }
-                }
-                return super.getTableCellEditorComponent(table, value, isSelected, row, column);
-            }
-        });
+        TableColumn qualCol = tableQualities.getColumnModel().getColumn(1);
+        JComboBox<String> qualityBox = new JComboBox<>();
+        qualCol.setCellEditor(new DefaultCellEditor(qualityBox) {
+            public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
+                qualityBox.removeAllItems();
+                Object catObj = table.getValueAt(row, 0);
+                String cat = catObj == null ? "" : catObj.toString();
+                for (QualityEntry qe : qualityEntries) {
+                    if (cat.equalsIgnoreCase(qe.category)) {
+                        qualityBox.addItem(qe.name);
+                    }
+                }
+                return super.getTableCellEditorComponent(table, value, isSelected, row, column);
+            }
+        });
 
         JScrollPane sp = new JScrollPane(tableQualities);
 
         loadQualities();
 
         qualitiesTableModel.addTableModelListener(e -> {
             if (e.getType() != javax.swing.event.TableModelEvent.UPDATE) return;
             int row = e.getFirstRow();
             int col = e.getColumn();
             if (row < 0) return;
             if (col == 0) {
                 qualitiesTableModel.setValueAt("", row, 1);
                 qualitiesTableModel.setValueAt("", row, 2);
                 qualitiesTableModel.setValueAt("", row, 3);
             } else if (col == 1) {
                 Object qVal = qualitiesTableModel.getValueAt(row, 1);
                 if (qVal != null) {
                     for (QualityEntry qe : qualityEntries) {
                         if (qe.name.equals(qVal.toString())) {
                             qualitiesTableModel.setValueAt(qe.type, row, 2);
                             qualitiesTableModel.setValueAt(String.valueOf(qe.karma), row, 3);
                             break;
                         }
                     }
                 }
             }
         });
 
         JButton btnAddQuality = new JButton("Add Quality");
         btnAddQuality.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 qualitiesTableModel.addRow(new Object[]{"", "", "", ""});
                 updateQualityCount();
             }
         });
-        JButton btnRemoveQuality = new JButton("Remove Quality");
-        btnRemoveQuality.addActionListener(new ActionListener() {
-            public void actionPerformed(ActionEvent e) {
-                int row = tableQualities.getSelectedRow();
-                if (row != -1) {
-                    int modelRow = tableQualities.convertRowIndexToModel(row);
-                    Object cat = qualitiesTableModel.getValueAt(modelRow, 0);
+        JButton btnRemoveQuality = new JButton("Remove Quality");
+        btnRemoveQuality.addActionListener(new ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                int row = tableQualities.getSelectedRow();
+                if (row != -1) {
+                    int modelRow = tableQualities.convertRowIndexToModel(row);
+                    Object cat = qualitiesTableModel.getValueAt(modelRow, 0);
                     if ("Metatype".equals(cat)) {
                         JOptionPane.showMessageDialog(frame,
                                 "ERROR: Qualities inherited from a Metatype cannot be removed.",
                                 "Error", JOptionPane.ERROR_MESSAGE);
                         return;
                     }
                     if ("Metagenetic".equals(cat)) {
                         JOptionPane.showMessageDialog(frame,
                                 "ERROR: Qualities inherited by SURGE Collective cannot be removed.",
                                 "Error", JOptionPane.ERROR_MESSAGE);
                         return;
                     }
-                    qualitiesTableModel.removeRow(modelRow);
-                    updateQualityCount();
-                }
-            }
-        });
-        lblQualityCount = new JLabel("0 qualities");
-        JPanel buttonSub = new JPanel(new FlowLayout(FlowLayout.LEFT));
-        buttonSub.add(btnAddQuality);
-        buttonSub.add(btnRemoveQuality);
-        JPanel btnPanel = new JPanel(new BorderLayout());
+                    qualitiesTableModel.removeRow(modelRow);
+                    java.util.Set<Integer> newSet = new java.util.HashSet<>();
+                    for (int r : lockedQualityRows) {
+                        if (r == modelRow) continue;
+                        newSet.add(r > modelRow ? r - 1 : r);
+                    }
+                    lockedQualityRows = newSet;
+                    updateQualityCount();
+                }
+            }
+        });
+        JButton btnSaveQuality = new JButton("Save Quality");
+        btnSaveQuality.addActionListener(e -> {
+            int row = tableQualities.getSelectedRow();
+            if (row != -1) {
+                int modelRow = tableQualities.convertRowIndexToModel(row);
+                lockedQualityRows.add(modelRow);
+                tableQualities.clearSelection();
+            }
+        });
+        lblQualityCount = new JLabel("0 qualities");
+        JPanel buttonSub = new JPanel(new FlowLayout(FlowLayout.LEFT));
+        buttonSub.add(btnAddQuality);
+        buttonSub.add(btnRemoveQuality);
+        buttonSub.add(btnSaveQuality);
+        JPanel btnPanel = new JPanel(new BorderLayout());
         btnPanel.add(buttonSub, BorderLayout.WEST);
         btnPanel.add(lblQualityCount, BorderLayout.EAST);
 
         panel.add(new JLabel("Enter qualities:"), BorderLayout.NORTH);
         panel.add(sp, BorderLayout.CENTER);
         panel.add(btnPanel, BorderLayout.SOUTH);
         updateQualityCount();
         return panel;
     }
 
     private JPanel buildContactsSection() {
         JPanel panel = new JPanel(new BorderLayout());
         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Contacts", TitledBorder.LEFT, TitledBorder.TOP));
 
         contactsTableModel = new DefaultTableModel(new Object[]{"Name", "Loyalty", "Connection"}, 0);
         tableContacts = new JTable(contactsTableModel);
         tableContacts.setPreferredScrollableViewportSize(new Dimension(500, 150));
         JScrollPane sp = new JScrollPane(tableContacts);
 
         JButton btnAddContact = new JButton("Add Contact");
         btnAddContact.addActionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 contactsTableModel.addRow(new Object[]{"", "", ""});
             }
         });
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index 13be49977a13261cb2de70fb2e52004d6108eca3..61116d4eb552a86bc5b20436d483e370bb5730e1 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -586,59 +647,72 @@ private void buildConditionMonitorSection() {
         panel.add(btnPanel, BorderLayout.SOUTH);
         return panel;
     }
 
     private JPanel buildLifestyleSection() {
         JPanel panel = new JPanel(new GridBagLayout());
         panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Lifestyle", TitledBorder.LEFT, TitledBorder.TOP));
         GridBagConstraints c = new GridBagConstraints();
         c.insets = new Insets(4, 4, 4, 4);
         c.anchor = GridBagConstraints.WEST;
 
         int row = 0;
         c.gridx = 0; c.gridy = row; panel.add(new JLabel("Nuyen:"), c);
         tfNuyen = new JTextField(10); c.gridx = 1; panel.add(tfNuyen, c);
         c.gridx = 2; panel.add(new JLabel("Primary Lifestyle:"), c);
         tfPrimaryLifestyle = new JTextField(15); c.gridx = 3; panel.add(tfPrimaryLifestyle, c);
         row++;
 
         c.gridx = 0; c.gridy = row; panel.add(new JLabel("Fake IDs / Lifestyles / Funds / Licenses:"), c);
         tfFakeIDs = new JTextField(25); c.gridx = 1; c.gridwidth = 3; panel.add(tfFakeIDs, c);
         c.gridwidth = 1; row++;
 
         return panel;
     }
 
-    private JPanel buildNotesSection() {
-        JPanel panel = new JPanel(new BorderLayout());
-        panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Notes", TitledBorder.LEFT, TitledBorder.TOP));
-        taNotes = new JTextArea(4, 60);
-        taNotes.setLineWrap(true);
-        taNotes.setBorder(BorderFactory.createLineBorder(Color.GRAY));
-        panel.add(new JScrollPane(taNotes), BorderLayout.CENTER);
-        return panel;
-    }
+    private JPanel buildNotesSection() {
+        JPanel panel = new JPanel(new BorderLayout());
+        panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Notes", TitledBorder.LEFT, TitledBorder.TOP));
+        taNotes = new JTextArea(4, 60);
+        taNotes.setLineWrap(true);
+        taNotes.setBorder(BorderFactory.createLineBorder(Color.GRAY));
+        panel.add(new JScrollPane(taNotes), BorderLayout.CENTER);
+        return panel;
+    }
+
+    private JPanel buildKarmaLogPanel() {
+        karmaLogModel = new DefaultTableModel(new Object[]{"Action", "Cost"}, 0) {
+            public boolean isCellEditable(int r, int c) { return false; }
+        };
+        tableKarmaLog = new JTable(karmaLogModel);
+        tableKarmaLog.setPreferredScrollableViewportSize(new Dimension(150, 500));
+        JScrollPane sp = new JScrollPane(tableKarmaLog);
+        JPanel panel = new JPanel(new BorderLayout());
+        panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Karma Log", TitledBorder.LEFT, TitledBorder.TOP));
+        panel.add(sp, BorderLayout.CENTER);
+        return panel;
+    }
 
     private void updateSkillCount() {
         if (lblSkillCount != null) {
             lblSkillCount.setText(skillsTableModel.getRowCount() + " skills");
         }
     }
 
     private void updateQualityCount() {
         if (lblQualityCount != null) {
             lblQualityCount.setText(qualitiesTableModel.getRowCount() + " qualities");
         }
     }
 
     private void loadMetatypes() {
         cbMetatype.removeAllItems();
         metatypeMap.clear();
         java.io.File file = new java.io.File("Shadowrun_Metatype.csv");
         if (!file.exists()) return;
         try (java.io.BufferedReader br = new java.io.BufferedReader(new java.io.FileReader(file))) {
             String line = br.readLine(); // skip header
             java.util.List<String[]> mains = new java.util.ArrayList<>();
             java.util.Map<String, java.util.List<String[]>> variants = new java.util.LinkedHashMap<>();
             while ((line = br.readLine()) != null) {
                 String[] parts = line.split(",");
                 if (parts.length < 6) continue;
diff --git a/ShadowrunCharacterBuilderGUI.java b/ShadowrunCharacterBuilderGUI.java
index 13be49977a13261cb2de70fb2e52004d6108eca3..61116d4eb552a86bc5b20436d483e370bb5730e1 100644
--- a/ShadowrunCharacterBuilderGUI.java
+++ b/ShadowrunCharacterBuilderGUI.java
@@ -696,59 +770,76 @@ private void buildConditionMonitorSection() {
             while ((line = br.readLine()) != null) {
                 String[] parts = line.split(",", -1);
                 if (parts.length >= 3) {
                     String name = parts[0].trim();
                     String type = parts[2].trim();
                     if ("Changeling".equalsIgnoreCase(type)) {
                         cbSurgeCollective.addItem(name);
                     }
                 }
             }
         } catch (Exception ignored) {}
     }
 
     private void updateHeightFeet() {
         try {
             double cm = Double.parseDouble(tfHeight.getText());
             int totalInches = (int) Math.round(cm / 2.54);
             int feet = totalInches / 12;
             int inches = totalInches % 12;
             tfHeightFt.setText(String.format("%d'%d\"", feet, inches));
         } catch (Exception ex) {
             tfHeightFt.setText("");
         }
     }
 
-    private void updateWeightLbs() {
-        try {
-            double kg = Double.parseDouble(tfWeight.getText());
-            int lbs = (int) Math.round(kg * 2.20462);
-            tfWeightLbs.setText(String.valueOf(lbs));
-        } catch (Exception ex) {
-            tfWeightLbs.setText("");
-        }
-    }
+    private void updateWeightLbs() {
+        try {
+            double kg = Double.parseDouble(tfWeight.getText());
+            int lbs = (int) Math.round(kg * 2.20462);
+            tfWeightLbs.setText(String.valueOf(lbs));
+        } catch (Exception ex) {
+            tfWeightLbs.setText("");
+        }
+    }
+
+    private void updateDerivedAttributes() {
+        try {
+            int will = ((Number) spWillpower.getValue()).intValue();
+            int cha = ((Number) spCharisma.getValue()).intValue();
+            int intui = ((Number) spIntuition.getValue()).intValue();
+            int log = ((Number) spLogic.getValue()).intValue();
+            int str = ((Number) spStrength.getValue()).intValue();
+            int bod = ((Number) spBody.getValue()).intValue();
+            tfComposure.setText(String.valueOf(will + cha));
+            tfJudgeIntentions.setText(String.valueOf(intui + cha));
+            tfMemory.setText(String.valueOf(log + will));
+            tfLiftCarry.setText(String.valueOf(str + bod));
+        } catch (Exception ex) {
+            // ignore
+        }
+    }
 
     private void loadRacialTraitsForMetatype(String owner) {
         if (qualitiesTableModel == null) return;
         for (int i = qualitiesTableModel.getRowCount() - 1; i >= 0; i--) {
             Object cat = qualitiesTableModel.getValueAt(i, 0);
             if ("Metatype".equals(cat)) {
                 qualitiesTableModel.removeRow(i);
             }
         }
         java.io.File file = new java.io.File("Shadowrun_RacialTraits.csv");
         if (!file.exists()) { updateQualityCount(); return; }
         try (java.io.BufferedReader br = new java.io.BufferedReader(new java.io.FileReader(file))) {
             String line = br.readLine();
             while ((line = br.readLine()) != null) {
                 String[] parts = line.split(",(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)", -1);
                 if (parts.length >= 3 && parts[2].trim().equalsIgnoreCase(owner)) {
                     String trait = parts[0].replaceAll("^\"|\"$", "").trim();
                     String type = parts[1].trim();
                     qualitiesTableModel.addRow(new Object[]{"Metatype", trait, type, "0"});
                 }
             }
         } catch (Exception ignored) {}
         updateQualityCount();
     }
 
 
EOF
)